name: ELIS - Autoformat
# ============================================================================
# Purpose
#   Run Black on a target branch (default: `elis-bot`). If changes occur,
#   commit and push them, then (optionally) open/refresh a PR into `main`.
#
# Why this fixes the current red
#   • A PR cannot be opened when head == base; we now detect "no diff" and
#     skip PR creation gracefully (no 422).
#   • Robust sync handles unrelated histories and dirty trees on the bot branch.
#   • Line-ending normalisation per `.gitattributes` prevents Black churn on CI.
# ============================================================================

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: "Base branch to PR into"
        required: false
        default: "main"
      target_branch:
        description: "Branch to autoformat (in-place)"
        required: false
        default: "elis-bot"
      open_pr:
        description: "Open/refresh PR target_branch → base_branch"
        required: false
        default: "true"

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: autoformat-${{ inputs.target_branch }}
  cancel-in-progress: false

jobs:
  autoformat:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1) GitHub App token for write operations
      - name: Mint installation token (GitHub App)
        id: app
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ELIS_APP_ID }}
          private-key: ${{ secrets.ELIS_APP_PRIVATE_KEY }}

      # 2) Checkout repo (we'll position to the target branch next)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app.outputs.token }}
          fetch-depth: 0

      # 3) Git identity for commits/rebases
      - name: Configure Git identity
        run: |
          git config user.name  "elis-bot"
          git config user.email "elis-bot@users.noreply.github.com"

      # 4) Prepare target branch:
      #    - If origin/target exists, check it out.
      #    - Otherwise create from origin/base and push it.
      - name: Prepare target branch
        env:
          BASE:  ${{ inputs.base_branch }}
          HEAD:  ${{ inputs.target_branch }}
        run: |
          set -eux
          git fetch origin --prune
          git reset --hard
          git clean -fdx

          if git ls-remote --exit-code --heads origin "$HEAD" >/dev/null 2>&1; then
            git checkout -B "$HEAD" "origin/$HEAD"
          else
            git checkout -B "$HEAD" "origin/$BASE"
            git push -u origin "$HEAD"
          fi

      # 5) Sync target from base robustly (rebase; reset-to-base if rebase fails)
      - name: Sync target from base (rebase or reset)
        env:
          BASE:  ${{ inputs.base_branch }}
        run: |
          set -eux
          git fetch origin "$BASE" --depth=1
          if ! git rebase "origin/$BASE"; then
            git rebase --abort || true
            echo "Rebase failed or unrelated histories; resetting to origin/$BASE"
            git reset --hard "origin/$BASE"
          fi

      # 6) Normalise line endings per .gitattributes (prevents Black 'would reformat')
      - name: Normalise line endings (.gitattributes)
        run: |
          set -eux
          git add --renormalize .
          if ! git diff --cached --quiet; then
            git commit -m "chore(format): normalise line endings per .gitattributes"
          else
            echo "No line-ending normalisation needed."
          fi

      # 7) Set up Python and Black
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Black
        run: |
          python -m pip install --upgrade pip
          pip install black==24.8.0

      # 8) Run Black in-place
      - name: Run Black (format in-place)
        run: black .

      # 9) Commit and push (use --force-with-lease only for the bot branch if reset occurred)
      - name: Commit and push formatting changes
        env:
          HEAD:  ${{ inputs.target_branch }}
        run: |
          set -eux
          if ! git diff --quiet; then
            git add -A
            git commit -m "chore(format): apply Black autoformat"
          fi
          AHEAD=$(git rev-list --left-only --count "origin/$HEAD..HEAD" || echo 0)
          if [ "$AHEAD" -gt 0 ]; then
            git push --force-with-lease origin HEAD:"$HEAD"
            echo "Pushed: $(git rev-parse --short HEAD)"
          else
            echo "No changes to push."
          fi

      # 10) Decide if there is any diff between base and head; only then open a PR
      - name: Detect diff between base and head
        id: diff
        env:
          BASE:  ${{ inputs.base_branch }}
          HEAD:  ${{ inputs.target_branch }}
        run: |
          set -eux
          git fetch origin "$BASE" --depth=1
          # Compare remote base tip with current HEAD
          if git diff --quiet "origin/$BASE" HEAD; then
            echo "has_diff=false" >> "$GITHUB_OUTPUT"
            echo "No diff between ${BASE} and ${HEAD}."
          else
            echo "has_diff=true" >> "$GITHUB_OUTPUT"
            echo "Diff detected between ${BASE} and ${HEAD}."
          fi

      # 11) Open/refresh PR to base ONLY when there is a diff
      - name: Open/refresh PR to base
        if: ${{ inputs.open_pr == 'true' && steps.diff.outputs.has_diff == 'true' }}
        uses: actions/github-script@v6
        env:
          BASE_BRANCH: ${{ inputs.base_branch }}
          HEAD_BRANCH: ${{ inputs.target_branch }}
        with:
          github-token: ${{ steps.app.outputs.token }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const base  = process.env.BASE_BRANCH || 'main';
            const head  = process.env.HEAD_BRANCH || 'elis-bot';

            // If a PR already exists, do nothing
            const { data: openPRs } = await github.rest.pulls.list({
              owner, repo, state: 'open', base, head: `${owner}:${head}`,
            });

            if (openPRs.length > 0) {
              core.info(`PR already open: #${openPRs[0].number}`);
            } else {
              const { data: pr } = await github.rest.pulls.create({
                owner, repo, base, head,
                title: "chore(format): apply Black autoformat",
                body: "Automated formatting and line-ending normalisation by ELIS - Autoformat.",
              });
              core.info(`Opened PR #${pr.number}`);
            }

      # 12) No-diff note (keeps the job green without a PR)
      - name: No changes to PR
        if: ${{ steps.diff.outputs.has_diff != 'true' }}
        run: echo "No commits between ${BASE_BRANCH:-main} and ${HEAD_BRANCH:-elis-bot} — PR not required."
