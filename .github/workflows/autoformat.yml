name: ELIS - Autoformat
# ============================================================================
# Purpose
#   Run Black on a target branch (default: `elis-bot`). If changes occur,
#   commit and push them, then (optionally) open/refresh a PR into `main`.
#
# Why this fixes your recurring errors
#   • Normalises line endings per `.gitattributes` to stop Black "would reformat"
#     caused by CRLF on Linux runners.
#   • Formats in-place with Black and pushes the exact bytes into a PR to `main`,
#     so `ELIS - CI` sees identical content and passes `black --check .`.
#   • Corrects the PR step: `actions/github-script` now receives workflow inputs
#     via env vars instead of `core.getInput`, which only reads *action* inputs.
#
# Usage
#   Actions → "ELIS - Autoformat" → Run workflow
#     - base_branch   (default: main)       # PR target (protected)
#     - target_branch (default: elis-bot)   # branch to format in place
#     - open_pr       (default: true)       # open/refresh PR target→base
#
# Governance
#   Manual-only (`workflow_dispatch`), uses a GitHub App token, and avoids
#   changing `main` directly. Keep PRs small and reviewable.
# ============================================================================

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: "Base branch to PR into"
        required: false
        default: "main"
      target_branch:
        description: "Branch to autoformat (in-place)"
        required: false
        default: "elis-bot"
      open_pr:
        description: "Open/refresh PR target_branch → base_branch"
        required: false
        default: "true"

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: autoformat-${{ inputs.target_branch }}
  cancel-in-progress: false

jobs:
  autoformat:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1) Mint a short-lived GitHub App installation token
      - name: Mint installation token (GitHub App)
        id: app
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ELIS_APP_ID }}
          private-key: ${{ secrets.ELIS_APP_PRIVATE_KEY }}

      # 2) Check out the target branch to be formatted
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_branch }}
          token: ${{ steps.app.outputs.token }}
          fetch-depth: 0

      # 3) Configure Git identity (needed for rebase/commit)
      - name: Configure Git identity
        run: |
          git config user.name  "elis-bot"
          git config user.email "elis-bot@users.noreply.github.com"

      # 4) Sync target branch from base (fast-forward first, then rebase if needed)
      #    Keeps the PR minimal and avoids diverging histories.
      - name: Sync target from base
        run: |
          set -eux
          git fetch origin ${{ inputs.base_branch }} --depth=1
          git merge --ff-only origin/${{ inputs.base_branch }} || git rebase origin/${{ inputs.base_branch }}

      # 5) Normalise line endings per .gitattributes (prevents "would reformat")
      #    This is explicitly before running Black.
      - name: Normalise line endings (.gitattributes)
        run: |
          set -eux
          git add --renormalize .
          if ! git diff --cached --quiet; then
            git commit -m "chore(format): normalise line endings per .gitattributes"
          else
            echo "No line-ending normalisation needed."
          fi

      # 6) Set up Python and install Black (pinned)
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Black
        run: |
          python -m pip install --upgrade pip
          pip install black==24.8.0

      # 7) Run Black in-place
      - name: Run Black (format in-place)
        run: black .

      # 8) Commit & push:
      #    - Create a Black commit if there are changes.
      #    - Always push if local branch is ahead (e.g., after normalisation).
      - name: Commit and push if changed or ahead
        run: |
          set -eux
          if ! git diff --quiet; then
            git add -A
            git commit -m "chore(format): apply Black autoformat"
          fi
          AHEAD=$(git rev-list --left-only --count "origin/${{ inputs.target_branch }}..HEAD" || echo 0)
          if [ "$AHEAD" -gt 0 ]; then
            git push origin HEAD:${{ inputs.target_branch }}
            echo "Pushed: $(git rev-parse --short HEAD)"
          else
            echo "No changes to push."
          fi

      # 9) Open or refresh PR target→base (idempotent; FIXED INPUT HANDLING)
      - name: Open/refresh PR to base
        if: ${{ inputs.open_pr == 'true' }}
        uses: actions/github-script@v6
        env:
          BASE_BRANCH: ${{ inputs.base_branch }}
          HEAD_BRANCH: ${{ inputs.target_branch }}
        with:
          github-token: ${{ steps.app.outputs.token }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const base  = process.env.BASE_BRANCH || 'main';
            const head  = process.env.HEAD_BRANCH || 'elis-bot';

            // Is there already an open PR head → base?
            const { data: prs } = await github.pulls.list({
              owner, repo, state: 'open', base, head: `${owner}:${head}`,
            });

            if (prs.length === 0) {
              const { data: pr } = await github.pulls.create({
                owner, repo, base, head,
                title: "chore(format): apply Black autoformat",
                body: "Automated formatting and line-ending normalisation by ELIS - Autoformat.",
              });
              core.info(`Opened PR #${pr.number}`);
            } else {
              core.info(`PR already open: #${prs[0].number}`);
            }
