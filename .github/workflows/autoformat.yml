name: ELIS - Autoformat
# ============================================================================
# Purpose
#   Run Black on a target branch (default: `elis-bot`). If changes occur,
#   commit and push them, then (optionally) open/refresh a PR into `main`.
#
# Why include a diagnostic step?
#   The "Show Black dry-run/diff" step prints what Black would change without
#   failing the job, so you can see exactly why CI "would reformat" before we
#   actually format and commit. This helps when PRs are red due to EOL/spacing.
# ============================================================================

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: "Base branch to PR into"
        required: false
        default: "main"
      target_branch:
        description: "Branch to autoformat (in-place)"
        required: false
        default: "elis-bot"
      open_pr:
        description: "Open/refresh PR target_branch → base_branch"
        required: false
        default: "true"

permissions:
  contents: write
  pull-requests: write

# Tweak #1: robust concurrency group even when inputs are empty (e.g. re-runs)
concurrency:
  group: autoformat-${{ github.event.inputs.target_branch != '' && github.event.inputs.target_branch || 'elis-bot' }}
  cancel-in-progress: false

jobs:
  autoformat:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1) GitHub App token for write operations
      - name: Mint installation token (GitHub App)
        id: app
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ELIS_APP_ID }}
          private-key: ${{ secrets.ELIS_APP_PRIVATE_KEY }}

      # 2) Checkout repo (we'll position to the target branch next)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app.outputs.token }}
          fetch-depth: 0

      # Tweak #2: explicit LF policy to avoid Black churn on mixed-OS histories
      - name: Configure Git identity & LF endings
        run: |
          set -eux
          git config user.name  "elis-bot"
          git config user.email "elis-bot@users.noreply.github.com"
          git config core.autocrlf false
          git config core.eol lf

      # 3) Prepare target branch:
      #    - If origin/target exists, check it out.
      #    - Otherwise create from origin/base and push it.
      - name: Prepare target branch
        env:
          BASE:  ${{ inputs.base_branch }}
          HEAD:  ${{ inputs.target_branch }}
        run: |
          set -eux
          git fetch origin --prune
          git reset --hard
          git clean -fdx

          if git ls-remote --exit-code --heads origin "$HEAD" >/dev/null 2>&1; then
            git checkout -B "$HEAD" "origin/$HEAD"
          else
            git checkout -B "$HEAD" "origin/$BASE"
            git push -u origin "$HEAD"
          fi

      # 4) Sync target from base (rebase; reset-to-base if rebase fails/unrelated)
      - name: Sync target from base (rebase or reset)
        env:
          BASE:  ${{ inputs.base_branch }}
        run: |
          set -eux
          git fetch origin "$BASE" --depth=1
          if ! git rebase "origin/$BASE"; then
            git rebase --abort || true
            echo "Rebase failed or unrelated histories; resetting to origin/$BASE"
            git reset --hard "origin/$BASE"
          fi

      # 5) Normalise line endings per .gitattributes (prevents Black 'would reformat')
      - name: Normalise line endings (.gitattributes)
        run: |
          set -eux
          git add --renormalize .
          if ! git diff --cached --quiet; then
            git commit -m "chore(format): normalise line endings per .gitattributes"
          else
            echo "No line-ending normalisation needed."
          fi

      # 6) Set up Python and Black
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Black
        run: |
          python -m pip install --upgrade pip
          pip install black==24.8.0

      # Diagnostic: preview what Black would change (non-fatal)
      - name: Show Black dry-run/diff
        run: |
          set -eux
          black --version
          echo ">>> black --check (non-fatal preview)"
          if black --check . ; then
            echo "Repository is already Black-clean."
          else
            echo "Black would reformat the files above."
          fi
          echo ">>> black --diff (non-fatal preview)"
          black --diff --quiet . || true

      # 7) Run Black in-place (actually format)
      - name: Run Black (format in-place)
        run: black .

      # 8) Commit and push (use --force-with-lease only when ahead)
      - name: Commit and push formatting changes
        env:
          HEAD:  ${{ inputs.target_branch }}
        run: |
          set -eux
          if ! git diff --quiet; then
            git add -A
            git commit -m "chore(format): apply Black autoformat"
          fi
          AHEAD=$(git rev-list --left-only --count "origin/$HEAD..HEAD" || echo 0)
          if [ "$AHEAD" -gt 0 ]; then
            git push --force-with-lease origin HEAD:"$HEAD"
            echo "Pushed: $(git rev-parse --short HEAD)"
          else
            echo "No changes to push."
          fi

      # 9) Use GitHub API to decide if there is any diff between base and head
      - name: Compare base..head (API)
        id: compare
        uses: actions/github-script@v6
        env:
          BASE_BRANCH: ${{ inputs.base_branch }}
          HEAD_BRANCH: ${{ inputs.target_branch }}
        with:
          github-token: ${{ steps.app.outputs.token }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const base  = process.env.BASE_BRANCH || 'main';
            const head  = process.env.HEAD_BRANCH || 'elis-bot';

            const cmp = await github.rest.repos.compareCommitsWithBasehead({
              owner, repo, basehead: `${base}...${head}`,
            });

            const hasDiff = (cmp.data.ahead_by > 0) || (cmp.data.files && cmp.data.files.length > 0);
            core.setOutput('has_diff', hasDiff ? 'true' : 'false');
            core.info(`Diff? ${hasDiff} (ahead_by=${cmp.data.ahead_by}, behind_by=${cmp.data.behind_by})`);

      # 10) Open/refresh PR only when there is a diff (prevents API 422)
      - name: Open/refresh PR to base
        if: ${{ inputs.open_pr == 'true' && steps.compare.outputs.has_diff == 'true' }}
        uses: actions/github-script@v6
        env:
          BASE_BRANCH: ${{ inputs.base_branch }}
          HEAD_BRANCH: ${{ inputs.target_branch }}
        with:
          github-token: ${{ steps.app.outputs.token }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const base  = process.env.BASE_BRANCH || 'main';
            const head  = process.env.HEAD_BRANCH || 'elis-bot';

            // If a PR already exists, do nothing
            const { data: openPRs } = await github.rest.pulls.list({
              owner, repo, state: 'open', base, head: `${owner}:${head}`,
            });

            if (openPRs.length > 0) {
              core.info(`PR already open: #${openPRs[0].number}`);
            } else {
              const { data: pr } = await github.rest.pulls.create({
                owner, repo, base, head,
                title: "chore(format): apply Black autoformat",
                body: "Automated formatting and line-ending normalisation by ELIS - Autoformat.",
              });
              core.info(`Opened PR #${pr.number}`);
            }

      # 11) No-diff note (keeps the job green without a PR)
      - name: No changes to PR
        if: ${{ steps.compare.outputs.has_diff != 'true' }}
        run: echo "No commits between ${BASE_BRANCH:-main} and ${HEAD_BRANCH:-elis-bot} — PR not required."

