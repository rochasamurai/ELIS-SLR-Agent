name: ELIS - Autoformat

# ELIS - Autoformat
# Purpose:
#   Manually run Black on branch "elis-bot". If formatting changes occur,
#   push the commit and open a Pull Request from "elis-bot" -> "main".
# Notes:
#   - Uses the installed GitHub App (elis-bot-commits) to obtain a token.
#   - Logs show an explicit no-op message when nothing changes and print the
#     commit SHA when a commit is created.

on:
  workflow_dispatch: {}

jobs:
  autoformat:
    runs-on: ubuntu-latest
    permissions:
      contents: read    # writes performed with the GitHub App token
      pull-requests: write
    defaults:
      run:
        shell: bash

    steps:
      # 1) Mint an installation token from the GitHub App
      - name: Mint installation token (GitHub App)
        id: app
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ELIS_APP_ID }}
          private-key: ${{ secrets.ELIS_APP_PRIVATE_KEY }}

      # 2) Checkout the automation branch where formatting is applied
      - name: Checkout branch elis-bot
        uses: actions/checkout@v4
        with:
          ref: elis-bot
          token: ${{ steps.app.outputs.token }}

      # 3) Set up Python (match CI version to avoid formatter drift)
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 4) Install Black (pinned for reproducibility)
      - name: Install Black
        run: |
          python -m pip install --upgrade pip
          pip install black==24.8.0

      # 5) Run Black in-place across the repo
      - name: Run Black (format in-place)
        run: |
          black .

      # 6) Detect whether Black changed anything
      - name: Detect changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "No formatting changes detected."
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      # 7) Commit & push when changes exist; expose the new commit SHA
      - name: Commit and push (if changed)
        if: ${{ steps.changes.outputs.changed == 'true' }}
        id: commit
        run: |
          git config user.name  "ELIS Bot"
          git config user.email "233278419+elis-bot@users.noreply.github.com"
          git add -A
          git commit -m "chore(format): apply Black autoformat"
          echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          git push origin HEAD:elis-bot

      - name: Show commit SHA
        if: ${{ steps.changes.outputs.changed == 'true' }}
        env:
          COMMIT_SHA: ${{ steps.commit.outputs.sha }}
        run: |
          echo "Autoformat commit SHA: ${COMMIT_SHA}"

      # 8) Create or reuse a PR from elis-bot -> main (only if there were changes)
      - name: Create Pull Request (elis-bot -> main)
        if: ${{ steps.changes.outputs.changed == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app.outputs.token }}
          script: |
            const { owner, repo } = context.repo;
            const head = 'elis-bot';
            const base = 'main';
            const title = 'chore(format): apply Black autoformat';
            const body  = 'Automated formatting by ELIS Bot (Black).';

            // If an identical PR is already open, do not create another.
            const existing = await github.rest.pulls.list({
              owner, repo, state: 'open', head: `${owner}:${head}`, base
            });

            if (existing.data.length > 0) {
              const pr = existing.data[0];
              core.notice(`PR already open: #${pr.number}`);
            } else {
              const pr = await github.rest.pulls.create({ owner, repo, head, base, title, body });
              core.notice(`PR created: #${pr.data.number}`);

              // Optional: label the PR for clarity
              await github.rest.issues.addLabels({
                owner, repo, issue_number: pr.data.number,
                labels: ['bot', 'format']
              });
            }
