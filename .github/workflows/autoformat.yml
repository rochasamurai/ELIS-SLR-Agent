name: ELIS - Autoformat
# ============================================================================
# Purpose
#   Run Black on a target branch (default: `elis-bot`). If changes occur,
#   commit and push them, then (optionally) open/refresh a PR into `main`.
#
# Key behaviours
#   • Uses a GitHub App installation token (no PATs).
#   • Replays base (`main`) onto the target branch first (fast-forward or rebase),
#     so the PR only contains formatting deltas.
#   • Creates a commit only when Black actually changes files.
#   • Opens or refreshes a PR target→base when requested.
#
# Usage
#   Actions → "ELIS - Autoformat" → Run workflow.
#   Inputs:
#     - base_branch (default: main)      # PR target (protected)
#     - target_branch (default: elis-bot) # branch to format in place
#     - open_pr (default: true)           # open/refresh PR target→base
#
# Notes
#   • `.gitattributes` already enforces LF for Python/text; Black will be stable.
#   • Keep this workflow manual (`workflow_dispatch`) per repo governance.
# ============================================================================

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: "Base branch to PR into"
        required: false
        default: "main"
      target_branch:
        description: "Branch to autoformat (in-place)"
        required: false
        default: "elis-bot"
      open_pr:
        description: "Open/refresh PR target_branch → base_branch"
        required: false
        default: "true"

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: autoformat-${{ inputs.target_branch }}
  cancel-in-progress: false

jobs:
  autoformat:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1) Mint a short-lived GitHub App installation token
      - name: Mint installation token (GitHub App)
        id: app
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ELIS_APP_ID }}
          private-key: ${{ secrets.ELIS_APP_PRIVATE_KEY }}

      # 2) Check out the target branch to be formatted
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_branch }}
          token: ${{ steps.app.outputs.token }}
          fetch-depth: 0

      # 3) Configure Git identity (needed for rebase/commit)
      - name: Configure Git identity
        run: |
          git config user.name  "elis-bot"
          git config user.email "elis-bot@users.noreply.github.com"

      # 4) Sync target branch with base (fast-forward or rebase)
      #    - Keeps the PR minimal and avoids formatting diverging commits.
      - name: Sync target from base
        run: |
          set -eux
          git fetch origin ${{ inputs.base_branch }} --depth=1
          # Try fast-forward first; if not possible, rebase onto base.
          git merge --ff-only origin/${{ inputs.base_branch }} || git rebase origin/${{ inputs.base_branch }}

      # 5) Set up Python and install Black (pinned)
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Black
        run: |
          python -m pip install --upgrade pip
          pip install black==24.8.0

      # 6) Run Black in-place
      - name: Run Black (format in-place)
        run: black .

      # 7) Commit & push only if there are changes
      - name: Commit and push if changed
        run: |
          set -eux
          if git diff --quiet; then
            echo "No formatting changes detected."
            exit 0
          fi
          git add -A
          git commit -m "chore(format): apply Black autoformat"
          git push origin HEAD:${{ inputs.target_branch }}
          echo "Pushed: $(git rev-parse --short HEAD)"

      # 8) Open or refresh PR target→base (optional)
      - name: Open/refresh PR to base
        if: ${{ inputs.open_pr == 'true' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.app.outputs.token }}
          branch: ${{ inputs.target_branch }}
          base: ${{ inputs.base_branch }}
          title: "chore(format): apply Black autoformat"
          commit-message: "chore(format): apply Black autoformat"
          body: |
            Automated formatting by **ELIS - Autoformat**.
            - Base: `${{ inputs.base_branch }}`
            - Target: `${{ inputs.target_branch }}`
            - Formatter: `black==24.8.0`
          labels: "automation, formatting"
