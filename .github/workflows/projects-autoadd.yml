# .github/workflows/projects-autoadd.yml
# ELIS - Projects Auto-Add
# Purpose:
#   1) When an Issue/PR is OPENED, REOPENED, or LABELLED with `ELIS-Validation` or `ci`,
#      add it to the ELIS Project and set a sensible Status.
#   2) PRs → Status = "In review"
#      Issues → Status = "To do"
#
# Prerequisites:
#   • Repository variable PROJECT_ID set to your GitHub Projects (v2) ID
#     (Settings → Secrets and variables → Actions → Variables → New → Name: PROJECT_ID).
#
# Notes:
#   • Uses the built-in GITHUB_TOKEN; no personal token needed.
#   • The workflow is idempotent: re-running on the same item is safe.

name: ELIS - Projects Auto-Add

on:
  issues:
    types: [opened, reopened, labeled]
  pull_request:
    types: [opened, reopened, labeled]

permissions:
  contents: read
  issues: write
  pull-requests: write
  repository-projects: write   # required to write to Projects (v2)

jobs:
  add_and_set_status:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check required tools (gh, jq)
        run: |
          gh --version
          jq --version

      - name: Determine content node id (Issue or PR)
        id: ids
        run: |
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "TYPE=issue" >> $GITHUB_OUTPUT
            echo "NUM=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            CID=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }} --jq .node_id)
          else
            echo "TYPE=pr" >> $GITHUB_OUTPUT
            echo "NUM=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            CID=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} --jq .node_id)
          fi
          echo "CID=$CID" >> $GITHUB_OUTPUT
          echo "Content node id: $CID"

      - name: Check labels and add to Project when matching
        id: add
        run: |
          CID="${{ steps.ids.outputs.CID }}"

          # Gather labels on the item (both Issues and PRs are Labelable)
          LABS=$(gh api graphql -f query='
            query($id:ID!){
              node(id:$id){
                ... on Labelable{
                  labels(first:100){ nodes{ name } }
                }
              }
            }' -f id="$CID" --jq '.data.node.labels.nodes[].name' | tr '\n' ' ' | tr -s ' ')
          echo "Labels: $LABS"

          case " $LABS " in
            *" ELIS-Validation "*|*" ci "*)
              echo "Label match → ensure Project membership"
              # Idempotent: adding twice is safe (errors are ignored)
              gh api graphql -f query='mutation($pid:ID!,$cid:ID!){
                addProjectV2ItemById(input:{projectId:$pid,contentId:$cid}){ item { id } }
              }' -f pid="$PROJECT_ID" -f cid="$CID" >/dev/null 2>&1 || true
            ;;
            *)
              echo "No matching labels; skipping Project add for now."
            ;;
          esac

      # ────────────────────────────────────────────────────────────────────────────
      # PR opened/reopened → If labelled appropriately, set Status = In review
      # (This covers the common case where the PR is opened with labels already set.)
      - name: Set Status for PR opened/reopened -> In review
        if: steps.ids.outputs.TYPE == 'pr' && (github.event.action == 'opened' || github.event.action == 'reopened')
        run: |
          CID="${{ steps.ids.outputs.CID }}"

          # Check labels again; only proceed if label matches our policy
          LABS=$(gh api graphql -f query='
            query($id:ID!){
              node(id:$id){
                ... on Labelable{
                  labels(first:100){ nodes{ name } }
                }
              }
            }' -f id="$CID" --jq '.data.node.labels.nodes[].name' | tr '\n' ' ' | tr -s ' ')
          case " $LABS " in *" ELIS-Validation "*|*" ci "*);; *) echo "PR has no matching label; skipping."; exit 0;; esac

          # Ensure item is on the Project (idempotent)
          gh api graphql -f query='mutation($pid:ID!,$cid:ID!){
            addProjectV2ItemById(input:{projectId:$pid,contentId:$cid}){ item { id } }
          }' -f pid="$PROJECT_ID" -f cid="$CID" >/dev/null 2>&1 || true

          # Find the Project item whose content.id == CID
          ITEM_ID=$(
            gh api graphql -f query='
              query($pid:ID!){
                node(id:$pid){
                  ... on ProjectV2{
                    items(first:200){
                      nodes{
                        id
                        content{
                          __typename
                          ... on Issue{ id }
                          ... on PullRequest{ id }
                        }
                      }
                    }
                  }
                }
              }' -f pid="$PROJECT_ID" \
            | jq -r --arg CID "$CID" '.data.node.items.nodes[] | select(.content.id==$CID) | .id' | head -n1
          )
          echo "ITEM_ID=$ITEM_ID"

          # Fetch the Status field and the "In review" option id
          STATUS_JSON=$(gh api graphql -f query='
            query($pid:ID!){
              node(id:$pid){
                ... on ProjectV2{
                  fields(first:50){
                    nodes{
                      __typename
                      id
                      name
                      ... on ProjectV2SingleSelectField { options { id name } }
                    }
                  }
                }
              }
            }' -f pid="$PROJECT_ID")
          STATUS_FIELD_ID=$(echo "$STATUS_JSON" | jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .id')
          INREVIEW_ID=$(echo "$STATUS_JSON" | jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="In review") | .id')

          # Update Status to "In review"
          gh api graphql -f query='mutation($pid:ID!,$iid:ID!,$fid:ID!,$oid:ID!){
            updateProjectV2ItemFieldValue(input:{
              projectId:$pid,itemId:$iid,fieldId:$fid,
              value:{singleSelectOptionId:$oid}
            }){ projectV2Item{ id } }
          }' -f pid="$PROJECT_ID" -f iid="$ITEM_ID" -f fid="$STATUS_FIELD_ID" -f oid="$INREVIEW_ID"

      # PR receives a matching label later → set Status = In review
      - name: Set Status for PR labeled -> In review
        if: steps.ids.outputs.TYPE == 'pr' && github.event.action == 'labeled' && (github.event.label.name == 'ci' || github.event.label.name == 'ELIS-Validation')
        run: |
          CID="${{ steps.ids.outputs.CID }}"

          gh api graphql -f query='mutation($pid:ID!,$cid:ID!){
            addProjectV2ItemById(input:{projectId:$pid,contentId:$cid}){ item { id } }
          }' -f pid="$PROJECT_ID" -f cid="$CID" >/dev/null 2>&1 || true

          ITEM_ID=$(
            gh api graphql -f query='
              query($pid:ID!){
                node(id:$pid){
                  ... on ProjectV2{
                    items(first:200){
                      nodes{
                        id
                        content{
                          __typename
                          ... on Issue{ id }
                          ... on PullRequest{ id }
                        }
                      }
                    }
                  }
                }
              }' -f pid="$PROJECT_ID" \
            | jq -r --arg CID "$CID" '.data.node.items.nodes[] | select(.content.id==$CID) | .id' | head -n1
          )

          STATUS_JSON=$(gh api graphql -f query='
            query($pid:ID!){
              node(id:$pid){
                ... on ProjectV2{
                  fields(first:50){
                    nodes{
                      __typename
                      id
                      name
                      ... on ProjectV2SingleSelectField { options { id name } }
                    }
                  }
                }
              }
            }' -f pid="$PROJECT_ID")
          STATUS_FIELD_ID=$(echo "$STATUS_JSON" | jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .id')
          INREVIEW_ID=$(echo "$STATUS_JSON" | jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="In review") | .id')

          gh api graphql -f query='mutation($pid:ID!,$iid:ID!,$fid:ID!,$oid:ID!){
            updateProjectV2ItemFieldValue(input:{
              projectId:$pid,itemId:$iid,fieldId:$fid,
              value:{singleSelectOptionId:$oid}
            }){ projectV2Item{ id } }
          }' -f pid="$PROJECT_ID" -f iid="$ITEM_ID" -f fid="$STATUS_FIELD_ID" -f oid="$INREVIEW_ID"

      # Issue opened/reopened → set Status = To do (when labelled appropriately)
      - name: Set Status for Issue opened/reopened -> To do
        if: steps.ids.outputs.TYPE == 'issue' && (github.event.action == 'opened' || github.event.action == 'reopened')
        run: |
          CID="${{ steps.ids.outputs.CID }}"

          LABS=$(gh api graphql -f query='
            query($id:ID!){
              node(id:$id){
                ... on Labelable{
                  labels(first:100){ nodes{ name } }
                }
              }
            }' -f id="$CID" --jq '.data.node.labels.nodes[].name' | tr '\n' ' ' | tr -s ' ')
          case " $LABS " in *" ELIS-Validation "*|*" ci "*);; *) echo "Issue has no matching label; skipping."; exit 0;; esac

          gh api graphql -f query='mutation($pid:ID!,$cid:ID!){
            addProjectV2ItemById(input:{projectId:$pid,contentId:$cid}){ item { id } }
          }' -f pid="$PROJECT_ID" -f cid="$CID" >/dev/null 2>&1 || true

          ITEM_ID=$(
            gh api graphql -f query='
              query($pid:ID!){
                node(id:$pid){
                  ... on ProjectV2{
                    items(first:200){
                      nodes{
                        id
                        content{
                          __typename
                          ... on Issue{ id }
                          ... on PullRequest{ id }
                        }
                      }
                    }
                  }
                }
              }' -f pid="$PROJECT_ID" \
            | jq -r --arg CID "$CID" '.data.node.items.nodes[] | select(.content.id==$CID) | .id' | head -n1
          )

          STATUS_JSON=$(gh api graphql -f query='
            query($pid:ID!){
              node(id:$pid){
                ... on ProjectV2{
                  fields(first:50){
                    nodes{
                      __typename
                      id
                      name
                      ... on ProjectV2SingleSelectField { options { id name } }
                    }
                  }
                }
              }
            }' -f pid="$PROJECT_ID")
          STATUS_FIELD_ID=$(echo "$STATUS_JSON" | jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .id')
          TODO_ID=$(echo "$STATUS_JSON" | jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="To do") | .id')

          gh api graphql -f query='mutation($pid:ID!,$iid:ID!,$fid:ID!,$oid:ID!){
            updateProjectV2ItemFieldValue(input:{
              projectId:$pid,itemId:$iid,fieldId:$fid,
              value:{singleSelectOptionId:$oid}
            }){ projectV2Item{ id } }
          }' -f pid="$PROJECT_ID" -f iid="$ITEM_ID" -f fid="$STATUS_FIELD_ID" -f oid="$TODO_ID"
