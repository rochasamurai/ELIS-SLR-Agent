name: ELIS - Housekeeping
# =============================================================================
# Purpose
#   Keep the repo lean by deleting old workflow runs and artifacts.
#   - General retention window for completed runs and non-nightly artifacts
#   - Separate, shorter retention window for nightly bundles
#
# Triggers
#   - Manual (workflow_dispatch) with UI inputs
#   - Weekly schedule (Sunday 06:00 UTC)
#
# Notes
#   - Never reference `inputs.*` outside dispatch; always resolve first.
#   - Uses only the GitHub-provided token.
#   - Step Summary shows counts (runs/artifacts; nightly vs general).
# =============================================================================

on:
  workflow_dispatch:
    inputs:
      retention_days:
        description: "General retention window (days) for runs and non-nightly artifacts"
        type: number
        default: 14
        required: true
      nightly_artifact_retention_days:
        description: "Nightly artifact retention window (days)"
        type: number
        default: 7
        required: true
      nightly_name:
        description: "EXACT nightly artifact name"
        type: string
        default: "elis-nightly-artefacts"
        required: true
      nightly_aliases_csv:
        description: "Optional comma-separated list of additional EXACT nightly names"
        type: string
        default: ""
        required: false
      delete_runs:
        description: "Delete COMPLETED runs older than general retention_days"
        type: boolean
        default: true
        required: true
      delete_artifacts:
        description: "Delete artifacts older than their retention windows"
        type: boolean
        default: true
        required: true
      dry_run:
        description: "Preview only (no deletions)"
        type: boolean
        default: true
        required: true

  # Weekly schedule: Sunday 06:00 UTC
  schedule:
    - cron: "0 6 * * 0"

concurrency:
  group: housekeeping-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

jobs:
  housekeeping:
    runs-on: ubuntu-latest

    steps:
      # --------------------------------------------------------
      # Resolve inputs / defaults so the rest of the job NEVER
      # touches `inputs.*` directly (safe for schedule runs).
      # --------------------------------------------------------
      - name: Resolve inputs / defaults
        id: cfg
        env:
          RET_ALL_IN:  ${{ inputs.retention_days }}
          RET_N_IN:    ${{ inputs.nightly_artifact_retention_days }}
          NL_NAME_IN:  ${{ inputs.nightly_name }}
          NL_ALIASES:  ${{ inputs.nightly_aliases_csv }}
          DEL_RUNS_IN: ${{ inputs.delete_runs }}
          DEL_ARTS_IN: ${{ inputs.delete_artifacts }}
          DRY_IN:      ${{ inputs.dry_run }}
        run: |
          set -euo pipefail

          # Fallbacks for scheduled runs (where inputs are empty)
          RET_ALL="${RET_ALL_IN:-14}"
          RET_N="${RET_N_IN:-7}"
          NL_NAME="${NL_NAME_IN:-elis-nightly-artefacts}"
          NL_ALIASES_CSV="${NL_ALIASES:-}"
          DEL_RUNS="${DEL_RUNS_IN:-true}"
          DEL_ARTS="${DEL_ARTS_IN:-true}"
          DRY="${DRY_IN:-false}"

          # Basic validation / coercion
          if ! [[ "$RET_ALL" =~ ^[0-9]+$ ]]; then
            echo "::error::retention_days must be an integer"; exit 1
          fi
          if ! [[ "$RET_N" =~ ^[0-9]+$ ]]; then
            echo "::error::nightly_artifact_retention_days must be an integer"; exit 1
          fi
          [[ "$RET_ALL" -lt 1 ]] && RET_ALL=1
          [[ "$RET_N" -lt 1 ]] && RET_N=1

          {
            echo "retention_days=$RET_ALL"
            echo "nightly_artifact_retention_days=$RET_N"
            echo "nightly_name=$NL_NAME"
            echo "nightly_aliases_csv=$NL_ALIASES_CSV"
            echo "delete_runs=$DEL_RUNS"
            echo "delete_artifacts=$DEL_ARTS"
            echo "dry_run=$DRY"
          } >> "$GITHUB_OUTPUT"

      # --------------------------------------------------------
      # Delete COMPLETED workflow runs older than general retention
      # --------------------------------------------------------
      - name: Housekeep workflow RUNS
        id: runs
        if: ${{ steps.cfg.outputs.delete_runs == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const retentionDays = parseInt(process.env.RETENTION_DAYS, 10);
            const dryRun        = (process.env.DRY_RUN === 'true');
            const cutoffMs      = Date.now() - retentionDays*24*60*60*1000;

            const { owner, repo } = context.repo;
            core.info(`Deleting COMPLETED runs older than ${retentionDays} days (dry_run=${dryRun})`);

            let deleted = 0, scanned = 0, page = 1;
            while (true) {
              const { data } = await github.rest.actions.listWorkflowRunsForRepo({
                owner, repo, per_page: 100, page, status: 'completed'
              });
              const runs = data.workflow_runs ?? [];
              if (!runs.length) break;

              for (const run of runs) {
                scanned++;
                const updatedAt = new Date(run.updated_at).getTime();
                if (updatedAt < cutoffMs) {
                  core.info(`- OLD run #${run.id} "${run.name}" updated_at=${run.updated_at}`);
                  if (!dryRun) {
                    await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                  }
                  deleted++;
                }
              }
              page++;
            }

            core.setOutput('scanned', String(scanned));
            core.setOutput('deleted', String(deleted));
        env:
          RETENTION_DAYS: ${{ steps.cfg.outputs.retention_days }}
          DRY_RUN:        ${{ steps.cfg.outputs.dry_run }}

      # --------------------------------------------------------
      # Delete artifacts with split retention (nightly vs general)
      # --------------------------------------------------------
      - name: Housekeep ARTIFACTS
        id: arts
        if: ${{ steps.cfg.outputs.delete_artifacts == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const retentionDaysGeneral = parseInt(process.env.RETENTION_DAYS, 10);
            const retentionDaysNightly = parseInt(process.env.NIGHTLY_RETENTION_DAYS, 10);
            const nightlyName          = (process.env.NIGHTLY_NAME || '').trim();
            const nightlyAliasesCsv    = (process.env.NIGHTLY_ALIASES || '').trim();
            const dryRun               = (process.env.DRY_RUN === 'true');

            const nightlyAliases = nightlyAliasesCsv
              ? nightlyAliasesCsv.split(',').map(s => s.trim()).filter(Boolean)
              : [];

            const isNightlyName = (name) => {
              if (!name) return false;
              if (name === nightlyName) return true;
              if (nightlyAliases.includes(name)) return true;
              // tolerant fallback for older bundles:
              if (name.startsWith('elis-nightly') || name.startsWith('elis_nightly')) return true;
              return false;
            };

            const cutoffGeneral = Date.now() - retentionDaysGeneral*24*60*60*1000;
            const cutoffNightly = Date.now() - retentionDaysNightly*24*60*60*1000;

            const { owner, repo } = context.repo;
            core.info(`Deleting artifacts (general>${retentionDaysGeneral}d, nightly>${retentionDaysNightly}d) dry_run=${dryRun}`);

            let scanned = 0, deletedTotal = 0, deletedNightly = 0, page = 1;
            while (true) {
              const { data } = await github.rest.actions.listArtifactsForRepo({
                owner, repo, per_page: 100, page
              });
              const arts = data.artifacts ?? [];
              if (!arts.length) break;

              for (const art of arts) {
                scanned++;
                const updatedAt = new Date(art.updated_at).getTime();
                const isNightly = isNightlyName(art.name);
                const cutoff = isNightly ? cutoffNightly : cutoffGeneral;

                if (updatedAt < cutoff) {
                  core.info(`- OLD ${isNightly ? 'nightly' : 'artifact'} #${art.id} name="${art.name}" updated_at=${art.updated_at}`);
                  if (!dryRun) {
                    await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: art.id });
                  }
                  deletedTotal++;
                  if (isNightly) deletedNightly++;
                }
              }
              page++;
            }

            core.setOutput('scanned', String(scanned));
            core.setOutput('deleted_total', String(deletedTotal));
            core.setOutput('deleted_nightly', String(deletedNightly));
        env:
          RETENTION_DAYS:          ${{ steps.cfg.outputs.retention_days }}
          NIGHTLY_RETENTION_DAYS:  ${{ steps.cfg.outputs.nightly_artifact_retention_days }}
          NIGHTLY_NAME:            ${{ steps.cfg.outputs.nightly_name }}
          NIGHTLY_ALIASES:         ${{ steps.cfg.outputs.nightly_aliases_csv }}
          DRY_RUN:                 ${{ steps.cfg.outputs.dry_run }}

      # --------------------------------------------------------
      # Rich Step Summary (always present) â€” SAFE arithmetic
      # --------------------------------------------------------
      - name: Summary
        env:
          RET_ALL:   ${{ steps.cfg.outputs.retention_days }}
          RET_N:     ${{ steps.cfg.outputs.nightly_artifact_retention_days }}
          RUNS_SC:   ${{ steps.runs.outputs.scanned || '0' }}
          RUNS_DEL:  ${{ steps.runs.outputs.deleted || '0' }}
          ARTS_SC:   ${{ steps.arts.outputs.scanned || '0' }}
          ARTS_DT:   ${{ steps.arts.outputs.deleted_total || '0' }}
          ARTS_DN:   ${{ steps.arts.outputs.deleted_nightly || '0' }}
          DRY:       ${{ steps.cfg.outputs.dry_run }}
        run: |
          set -euo pipefail
          # Coerce to integers with defaults
          dt="${ARTS_DT:-0}"; dn="${ARTS_DN:-0}"
          dt="${dt:-0}"; dn="${dn:-0}"
          # If values are empty, bash math still works due to :-0 above
          general=$(( dt - dn ))

          {
            echo "## Housekeeping completed"
            echo ""
            echo "### Retention"
            echo "- General retention: **${RET_ALL}** days"
            echo "- Nightly retention: **${RET_N}** days"
            echo ""
            echo "### Runs"
            echo "- Scanned: **${RUNS_SC}**"
            echo "- Deleted: **${RUNS_DEL}**"
            echo ""
            echo "### Artefacts"
            echo "- Scanned: **${ARTS_SC}**"
            echo "- Deleted (total): **${ARTS_DT}**"
            echo "  - Nightly: **${ARTS_DN}**"
            echo "  - General: **${general}**"
            echo ""
            echo "### Dry run"
            echo "- **${DRY}**"
          } >> "$GITHUB_STEP_SUMMARY"
