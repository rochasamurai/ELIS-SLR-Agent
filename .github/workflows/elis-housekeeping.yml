name: ELIS - Housekeeping
# =============================================================================
# Purpose
#   Keep Actions storage lean:
#     - delete COMPLETED workflow runs older than N days (general retention)
#     - delete artifacts older than N days, with a *shorter* window for
#       nightly bundles uploaded as "elis-nightly-artefacts" (aliases allowed)
#
# Triggers
#   - Manual: workflow_dispatch (with UI inputs)
#   - Weekly: Sunday 06:00 UTC
#
# Notes
#   - We ONLY reference `inputs.*` inside the resolver step.
#     All other steps consume `steps.cfg.outputs.*` to work for both
#     dispatch and schedule triggers.
# =============================================================================

on:
  workflow_dispatch:
    inputs:
      retention_days:
        description: General retention for runs & non-nightly artifacts (days)
        type: number
        required: true
        default: 14
      nightly_artifact_retention_days:
        description: Retention for nightly artifacts (days)
        type: number
        required: true
        default: 7
      nightly_name:
        description: Canonical nightly artifact name (exact match)
        type: string
        required: true
        default: "elis-nightly-artefacts"
      nightly_aliases_csv:
        description: Optional comma-separated extra nightly names (exact)
        type: string
        required: false
        default: ""
      delete_runs:
        description: Delete COMPLETED runs past general retention
        type: boolean
        required: true
        default: true
      delete_artifacts:
        description: Delete artifacts past retention windows
        type: boolean
        required: true
        default: true
      dry_run:
        description: Preview only (do not delete)
        type: boolean
        required: true
        default: true

  schedule:
    - cron: "0 6 * * 0"  # Sunday 06:00 UTC

permissions:
  actions: write
  contents: read

concurrency:
  group: housekeeping-${{ github.ref }}
  cancel-in-progress: true

jobs:
  housekeeping:
    runs-on: ubuntu-latest

    steps:
      # -----------------------------------------------------------------------
      # Resolve inputs & derived values (works for both dispatch and schedule)
      # -----------------------------------------------------------------------
      - name: Resolve inputs / defaults
        id: cfg
        env:
          RET_ALL_IN:  ${{ inputs.retention_days }}
          RET_N_IN:    ${{ inputs.nightly_artifact_retention_days }}
          NL_NAME_IN:  ${{ inputs.nightly_name }}
          NL_ALIASES_IN: ${{ inputs.nightly_aliases_csv }}
          DEL_RUNS_IN: ${{ inputs.delete_runs }}
          DEL_ARTS_IN: ${{ inputs.delete_artifacts }}
          DRY_RUN_IN:  ${{ inputs.dry_run }}
        run: |
          set -euo pipefail

          # Defaults for scheduled runs (no workflow_dispatch)
          RET_ALL="${RET_ALL_IN:-14}"
          RET_N="${RET_N_IN:-7}"
          NL_NAME="${NL_NAME_IN:-elis-nightly-artefacts}"
          NL_ALIASES="${NL_ALIASES_IN:-}"
          DEL_RUNS="${DEL_RUNS_IN:-true}"
          DEL_ARTS="${DEL_ARTS_IN:-true}"
          DRY_RUN="${DRY_RUN_IN:-true}"

          # Basic sanity
          case "$RET_ALL" in (''|*[!0-9]*) echo "::error::retention_days must be integer"; exit 1;; esac
          case "$RET_N"   in (''|*[!0-9]*) echo "::error::nightly_artifact_retention_days must be integer"; exit 1;; esac
          [ "$RET_ALL" -lt 1 ] && RET_ALL=1
          [ "$RET_N"   -lt 1 ] && RET_N=1

          # Normalise aliases: strip spaces, collapse duplicates
          IFS=',' read -r -a _ali <<< "${NL_ALIASES}"
          uniq_ali=""
          for a in "${_ali[@]}"; do
            a="$(echo "$a" | xargs)"
            [ -n "$a" ] || continue
            case ",$uniq_ali," in
              *,"$a",*) ;; # already present
              *) uniq_ali="${uniq_ali:+$uniq_ali,}$a" ;;
            esac
          done
          NL_ALIASES="$uniq_ali"

          echo "retention_days=${RET_ALL}"                     >> "$GITHUB_OUTPUT"
          echo "nightly_retention_days=${RET_N}"               >> "$GITHUB_OUTPUT"
          echo "nightly_name=${NL_NAME}"                       >> "$GITHUB_OUTPUT"
          echo "nightly_aliases_csv=${NL_ALIASES}"             >> "$GITHUB_OUTPUT"
          echo "delete_runs=${DEL_RUNS}"                       >> "$GITHUB_OUTPUT"
          echo "delete_artifacts=${DEL_ARTS}"                  >> "$GITHUB_OUTPUT"
          echo "dry_run=${DRY_RUN}"                            >> "$GITHUB_OUTPUT"

          echo "Configuration:"
          echo "  retention_days            = $RET_ALL"
          echo "  nightly_retention_days    = $RET_N"
          echo "  nightly_name              = $NL_NAME"
          echo "  nightly_aliases_csv       = ${NL_ALIASES:-<none>}"
          echo "  delete_runs               = $DEL_RUNS"
          echo "  delete_artifacts          = $DEL_ARTS"
          echo "  dry_run                   = $DRY_RUN"

      # -----------------------------------------------------------------------
      # Delete COMPLETED workflow runs older than general retention
      # -----------------------------------------------------------------------
      - name: Housekeep RUNS
        if: ${{ steps.cfg.outputs.delete_runs == 'true' }}
        uses: actions/github-script@v7
        env:
          RETENTION_DAYS: ${{ steps.cfg.outputs.retention_days }}
          DRY_RUN:        ${{ steps.cfg.outputs.dry_run }}
        with:
          github-token: ${{ github.token }}
          script: |
            const retentionDays = parseInt(process.env.RETENTION_DAYS, 10);
            const dryRun        = (process.env.DRY_RUN === 'true');
            const cutoffMs      = Date.now() - retentionDays*24*60*60*1000;
            const { owner, repo } = context.repo;

            core.info(`Deleting COMPLETED runs older than ${retentionDays} days (dry_run=${dryRun})`);

            let deleted = 0, scanned = 0, page = 1;
            for (;;) {
              const { data } = await github.rest.actions.listWorkflowRunsForRepo({
                owner, repo, per_page: 100, page, status: 'completed'
              });
              const runs = data.workflow_runs || [];
              if (!runs.length) break;

              for (const run of runs) {
                scanned++;
                const updatedAt = new Date(run.updated_at).getTime();
                if (updatedAt < cutoffMs) {
                  core.info(`- OLD run #${run.id} "${run.name}" updated_at=${run.updated_at}`);
                  if (!dryRun) {
                    await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                  }
                  deleted++;
                }
              }
              page++;
            }

            core.notice(`Runs scanned: ${scanned} | Runs deleted: ${deleted} | dry_run=${dryRun}`);
            core.setOutput('scanned', String(scanned));
            core.setOutput('deleted', String(deleted));

      # -----------------------------------------------------------------------
      # Delete artifacts â€” nightly vs general retention windows
      # -----------------------------------------------------------------------
      - name: Housekeep ARTIFACTS
        if: ${{ steps.cfg.outputs.delete_artifacts == 'true' }}
        uses: actions/github-script@v7
        env:
          RET_ALL:   ${{ steps.cfg.outputs.retention_days }}
          RET_N:     ${{ steps.cfg.outputs.nightly_retention_days }}
          NL_NAME:   ${{ steps.cfg.outputs.nightly_name }}
          NL_ALIASES: ${{ steps.cfg.outputs.nightly_aliases_csv }}
          DRY_RUN:   ${{ steps.cfg.outputs.dry_run }}
        with:
          github-token: ${{ github.token }}
          script: |
            const retGeneralDays = parseInt(process.env.RET_ALL, 10);
            const retNightlyDays = parseInt(process.env.RET_N, 10);
            const dryRun         = (process.env.DRY_RUN === 'true');

            const nightlyPrimary = (process.env.NL_NAME || '').trim();
            const aliasCsv = (process.env.NL_ALIASES || '').trim();
            const aliasList = aliasCsv ? aliasCsv.split(',').map(s => s.trim()).filter(Boolean) : [];
            const nightlyNames = new Set([nightlyPrimary, ...aliasList].filter(Boolean));

            const cutoffGeneral = Date.now() - retGeneralDays*24*60*60*1000;
            const cutoffNightly = Date.now() - retNightlyDays*24*60*60*1000;

            const { owner, repo } = context.repo;
            core.info(`Deleting artifacts (dry_run=${dryRun})`);
            core.info(`  - General retention: ${retGeneralDays} days`);
            core.info(`  - Nightly retention: ${retNightlyDays} days`);
            core.info(`  - Nightly names: ${[...nightlyNames].join(', ') || '<none>'}`);

            let scanned = 0, delNightly = 0, delGeneral = 0, page = 1;

            function isNightlyName(name) {
              if (nightlyNames.has(name)) return true;
              // tolerant fallback to catch early bundles
              return name.startsWith('elis-nightly') || name.startsWith('elis_nightly');
            }

            for (;;) {
              const { data } = await github.rest.actions.listArtifactsForRepo({
                owner, repo, per_page: 100, page
              });
              const arts = data.artifacts || [];
              if (!arts.length) break;

              for (const art of arts) {
                scanned++;
                const updatedAt = new Date(art.updated_at).getTime();
                const nightly = isNightlyName(art.name);

                if (nightly) {
                  if (updatedAt < cutoffNightly) {
                    core.info(`- OLD nightly artifact #${art.id} "${art.name}" updated_at=${art.updated_at}`);
                    if (!dryRun) {
                      await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: art.id });
                    }
                    delNightly++;
                  }
                } else {
                  if (updatedAt < cutoffGeneral) {
                    core.info(`- OLD general artifact #${art.id} "${art.name}" updated_at=${art.updated_at}`);
                    if (!dryRun) {
                      await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: art.id });
                    }
                    delGeneral++;
                  }
                }
              }
              page++;
            }

            core.notice(`Artifacts scanned: ${scanned} | Deleted (Nightly): ${delNightly} | Deleted (General): ${delGeneral} | dry_run=${dryRun}`);
            core.setOutput('scanned', String(scanned));
            core.setOutput('deleted_nightly', String(delNightly));
            core.setOutput('deleted_general', String(delGeneral));

      # -----------------------------------------------------------------------
      # Step summary
      # -----------------------------------------------------------------------
      - name: Summary
        run: |
          {
            echo "## Housekeeping completed"
            echo ""
            echo "### Retention"
            echo "- General retention: **${{ steps.cfg.outputs.retention_days }}** days"
            echo "- Nightly retention: **${{ steps.cfg.outputs.nightly_retention_days }}** days"
            echo ""
            echo "### Runs"
            echo "- Scanned: **${{ steps.runs.outputs.scanned || '0' }}**"
            echo "- Deleted: **${{ steps.runs.outputs.deleted || '0' }}**"
            echo ""
            echo "### Artefacts"
            echo "- Scanned: **${{ steps.arts.outputs.scanned || '0' }}**"
            echo "- Deleted (total): **$(( (steps.arts.outputs.deleted_nightly != '' && steps.arts.outputs.deleted_nightly) + (steps.arts.outputs.deleted_general != '' && steps.arts.outputs.deleted_general) ))**"
            echo "  - Nightly: **${{ steps.arts.outputs.deleted_nightly || '0' }}**"
            echo "  - General: **${{ steps.arts.outputs.deleted_general || '0' }}**"
            echo ""
            echo "### Dry run"
            echo "- **${{ steps.cfg.outputs.dry_run }}**"
          } >> "$GITHUB_STEP_SUMMARY"
