name: ELIS - Housekeeping
# =============================================================================
# Purpose
#   Keep Actions storage lean by deleting old workflow runs and artifacts.
#   Uses two retention windows:
#     - General runs & artifacts
#     - Nightly bundles (exact name: "elis-nightly-artefacts", plus optional aliases)
#
# Triggers
#   - Manual (workflow_dispatch) with UI inputs
#   - Weekly schedule (Sunday 06:00 UTC)
#
# Notes
#   - No 'push' trigger to avoid accidental executions on commits.
#   - We never reference 'inputs.*' outside the resolver step; schedule has no inputs.
# =============================================================================

on:
  workflow_dispatch:
    inputs:
      retention_days:
        description: "General retention in days (runs + non-nightly artifacts)"
        type: number
        required: true
        default: 14
      nightly_artifact_retention_days:
        description: "Nightly artifact retention in days"
        type: number
        required: true
        default: 7
      nightly_name:
        description: "Canonical nightly artifact name (exact)"
        type: string
        required: true
        default: "elis-nightly-artefacts"
      nightly_aliases_csv:
        description: "Optional CSV of additional nightly names (exact matches)"
        type: string
        required: false
        default: ""
      delete_runs:
        description: "Delete COMPLETED runs older than general retention"
        type: boolean
        required: true
        default: true
      delete_artifacts:
        description: "Delete artifacts past their retention windows"
        type: boolean
        required: true
        default: true
      dry_run:
        description: "Preview only (do not delete)"
        type: boolean
        required: true
        default: true

  schedule:
    - cron: "0 6 * * 0" # Sundays 06:00 UTC

permissions:
  actions: write
  contents: read

concurrency:
  group: housekeeping-${{ github.ref }}
  cancel-in-progress: true

jobs:
  housekeeping:
    runs-on: ubuntu-latest
    steps:
      # -----------------------------------------------------------------------
      # 1) Resolve inputs & derived values (works for dispatch AND schedule)
      #    Never use inputs.* outside this step.
      # -----------------------------------------------------------------------
      - name: Resolve inputs / defaults
        id: cfg
        env:
          RET_ALL_IN:          ${{ inputs.retention_days }}
          RET_N_IN:            ${{ inputs.nightly_artifact_retention_days }}
          NL_NAME_IN:          ${{ inputs.nightly_name }}
          NL_ALIASES_IN:       ${{ inputs.nightly_aliases_csv }}
          DEL_RUNS_IN:         ${{ inputs.delete_runs }}
          DEL_ARTS_IN:         ${{ inputs.delete_artifacts }}
          DRY_IN:              ${{ inputs.dry_run }}
        run: |
          set -euo pipefail
          # Defaults for schedule (no inputs)
          RET_ALL="${RET_ALL_IN:-14}"
          RET_N="${RET_N_IN:-7}"
          NL_NAME="${NL_NAME_IN:-elis-nightly-artefacts}"
          NL_ALIASES="${NL_ALIASES_IN:-}"
          DEL_RUNS="${DEL_RUNS_IN:-true}"
          DEL_ARTS="${DEL_ARTS_IN:-true}"
          DRY="${DRY_IN:-true}"

          # Basic sanitisation
          case "$DEL_RUNS" in true|false) ;; *) DEL_RUNS=true ;; esac
          case "$DEL_ARTS" in true|false) ;; *) DEL_ARTS=true ;; esac
          case "$DRY"      in true|false) ;; *) DRY=true      ;; esac
          if ! [[ "$RET_ALL" =~ ^[0-9]+$ ]]; then RET_ALL=14; fi
          if ! [[ "$RET_N"   =~ ^[0-9]+$ ]]; then RET_N=7;   fi

          echo "retention_days=$RET_ALL"                       >> "$GITHUB_OUTPUT"
          echo "nightly_retention_days=$RET_N"                 >> "$GITHUB_OUTPUT"
          echo "nightly_name=$NL_NAME"                         >> "$GITHUB_OUTPUT"
          echo "nightly_aliases_csv=$NL_ALIASES"               >> "$GITHUB_OUTPUT"
          echo "delete_runs=$DEL_RUNS"                         >> "$GITHUB_OUTPUT"
          echo "delete_artifacts=$DEL_ARTS"                    >> "$GITHUB_OUTPUT"
          echo "dry_run=$DRY"                                  >> "$GITHUB_OUTPUT"

          echo "Configuration:"
          echo "  general retention      = $RET_ALL days"
          echo "  nightly retention      = $RET_N days"
          echo "  nightly name (exact)   = $NL_NAME"
          echo "  nightly aliases (CSV)  = ${NL_ALIASES:-<none>}"
          echo "  delete runs?           = $DEL_RUNS"
          echo "  delete artifacts?      = $DEL_ARTS"
          echo "  dry run?               = $DRY"

      # -----------------------------------------------------------------------
      # 2) Delete COMPLETED workflow runs older than general retention
      # -----------------------------------------------------------------------
      - name: Housekeep workflow RUNS
        if: ${{ steps.cfg.outputs.delete_runs == 'true' }}
        id: runs
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const { context, github } = require('@actions/github');

            const retentionDays = parseInt(core.getInput('retention_days') || '14', 10);
            const dryRun = (core.getInput('dry_run') || 'true') === 'true';
            const cutoffMs = Date.now() - retentionDays*24*60*60*1000;
            const cutoffIso = new Date(cutoffMs).toISOString();

            core.info(`Deleting COMPLETED runs older than ${retentionDays} days (cutoff=${cutoffIso}, dry_run=${dryRun})`);

            const { owner, repo } = context.repo;
            let scanned = 0, deleted = 0, page = 1;

            for (;;) {
              const { data } = await github.rest.actions.listWorkflowRunsForRepo({
                owner, repo, per_page: 100, page, status: 'completed'
              });
              const runs = data.workflow_runs || [];
              if (!runs.length) break;

              for (const run of runs) {
                scanned++;
                const updatedAt = new Date(run.updated_at).getTime();
                if (updatedAt < cutoffMs) {
                  core.info(`- OLD run #${run.id} "${run.name}" updated_at=${run.updated_at}`);
                  if (!dryRun) {
                    await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                  }
                  deleted++;
                }
              }
              page++;
            }

            core.notice(`Runs scanned: ${scanned} | Runs deleted: ${deleted} | dry_run=${dryRun}`);
            core.setOutput('scanned', String(scanned));
            core.setOutput('deleted', String(deleted));
        with:
          retention_days: ${{ steps.cfg.outputs.retention_days }}
          dry_run:        ${{ steps.cfg.outputs.dry_run }}

      # -----------------------------------------------------------------------
      # 3) Delete artifacts with split logic (Nightly vs General)
      # -----------------------------------------------------------------------
      - name: Housekeep ARTIFACTS
        if: ${{ steps.cfg.outputs.delete_artifacts == 'true' }}
        id: arts
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const { context, github } = require('@actions/github');

            // Inputs
            const generalDays = parseInt(core.getInput('retention_days') || '14', 10);
            const nightlyDays = parseInt(core.getInput('nightly_retention_days') || '7', 10);
            const nightlyName = core.getInput('nightly_name') || 'elis-nightly-artefacts';
            const aliasesCsv  = (core.getInput('nightly_aliases_csv') || '').trim();
            const dryRun = (core.getInput('dry_run') || 'true') === 'true';

            const aliases = aliasesCsv ? aliasesCsv.split(',').map(s => s.trim()).filter(Boolean) : [];
            const isNightly = (nm) => {
              if (!nm) return false;
              if (nm === nightlyName) return true;
              if (aliases.includes(nm)) return true;
              return /^elis[-_]?nightly/i.test(nm); // tolerant fallback
            };

            const now = Date.now();
            const generalCutoffMs = now - generalDays*24*60*60*1000;
            const nightlyCutoffMs = now - nightlyDays*24*60*60*1000;

            const { owner, repo } = context.repo;
            core.info(`Artifacts cleaner (dry_run=${dryRun})`);
            core.info(`- general retention: ${generalDays} days`);
            core.info(`- nightly retention: ${nightlyDays} days`);
            core.info(`- nightly name: ${nightlyName}`);
            if (aliases.length) core.info(`- nightly aliases: ${aliases.join(', ')}`);

            let scanned = 0, deletedTotal = 0, deletedNightly = 0, deletedGeneral = 0, page = 1;

            for (;;) {
              const { data } = await github.rest.actions.listArtifactsForRepo({
                owner, repo, per_page: 100, page
              });
              const arts = data.artifacts || [];
              if (!arts.length) break;

              for (const art of arts) {
                scanned++;
                const name = art.name || '';
                const updatedMs = new Date(art.updated_at).getTime();
                const nightly = isNightly(name);

                if (nightly) {
                  if (updatedMs < nightlyCutoffMs) {
                    core.info(`- NIGHTLY old artifact #${art.id} "${name}" updated_at=${art.updated_at}`);
                    if (!dryRun) {
                      await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: art.id });
                    }
                    deletedNightly++; deletedTotal++;
                  }
                } else {
                  if (updatedMs < generalCutoffMs) {
                    core.info(`- GENERAL old artifact #${art.id} "${name}" updated_at=${art.updated_at}`);
                    if (!dryRun) {
                      await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: art.id });
                    }
                    deletedGeneral++; deletedTotal++;
                  }
                }
              }
              page++;
            }

            core.notice(`Artifacts scanned: ${scanned} | Deleted (total): ${deletedTotal} | Nightly: ${deletedNightly} | General: ${deletedGeneral} | dry_run=${dryRun}`);
            core.setOutput('scanned', String(scanned));
            core.setOutput('deleted_total', String(deletedTotal));
            core.setOutput('deleted_nightly', String(deletedNightly));
            core.setOutput('deleted_general', String(deletedGeneral));
        with:
          retention_days:           ${{ steps.cfg.outputs.retention_days }}
          nightly_retention_days:   ${{ steps.cfg.outputs.nightly_retention_days }}
          nightly_name:             ${{ steps.cfg.outputs.nightly_name }}
          nightly_aliases_csv:      ${{ steps.cfg.outputs.nightly_aliases_csv }}
          dry_run:                  ${{ steps.cfg.outputs.dry_run }}

      # -----------------------------------------------------------------------
      # 4) Rich Step Summary for quick review
      # -----------------------------------------------------------------------
      - name: Summary
        run: |
          {
            echo "## Housekeeping completed"
            echo ""
            echo "### Retention"
            echo "- General retention: **${{ steps.cfg.outputs.retention_days }}** days"
            echo "- Nightly retention: **${{ steps.cfg.outputs.nightly_retention_days }}** days"
            echo ""
            echo "### Runs"
            echo "- Scanned: **${{ steps.runs.outputs.scanned || '0' }}**"
            echo "- Deleted: **${{ steps.runs.outputs.deleted || '0' }}**"
            echo ""
            echo "### Artefacts"
            echo "- Scanned: **${{ steps.arts.outputs.scanned || '0' }}**"
            echo "- Deleted (total): **${{ steps.arts.outputs.deleted_total || '0' }}**"
            echo "  - Nightly: **${{ steps.arts.outputs.deleted_nightly || '0' }}**"
            echo "  - General: **${{ steps.arts.outputs.deleted_general || '0' }}**"
            echo ""
            echo "### Dry run"
            echo "- **${{ steps.cfg.outputs.dry_run }}**"
          } >> "$GITHUB_STEP_SUMMARY"
