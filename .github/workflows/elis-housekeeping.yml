name: ELIS - Housekeeping
# =============================================================================
# Workflow: ELIS - Housekeeping
# Purpose:
#   - Clean up old workflow runs and artefacts to keep the repo lean.
#   - Default behaviour:
#       • Delete COMPLETED workflow runs older than N days (general retention).
#       • Delete artefacts with per-category retention:
#           - Nightly artefacts (elis-nightly-*) → 7 days (default)
#           - All other artefacts              → 14 days (default)
#
# Triggers:
#   - Manual (workflow_dispatch) with options.
#   - Weekly schedule (Sunday 06:00 UTC).
#
# Permissions:
#   - actions: write (required to delete runs/artefacts)
#   - contents: read
#
# Notes:
#   - Uses the GitHub-provided token (${{ github.token }}) only.
#   - Dry-run supported to preview deletions.
#   - Concurrency guard prevents overlapping housekeeping runs.
#   - Step Summary provides quick counts in the Actions UI.
# =============================================================================

on:
  workflow_dispatch:
    inputs:
      retention_days:
        description: "General retention (days) for runs and non-nightly artefacts"
        type: number
        default: 14
        required: true
      nightly_artifact_retention_days:
        description: "Retention (days) for nightly artefacts (elis-nightly-*)"
        type: number
        default: 7
        required: true
      delete_runs:
        description: "Delete COMPLETED workflow runs older than retention_days"
        type: boolean
        default: true
        required: true
      delete_artifacts:
        description: "Delete artefacts older than their retention"
        type: boolean
        default: true
        required: true
      dry_run:
        description: "Preview only (do not delete)"
        type: boolean
        default: true
        required: true

  # Weekly schedule: Sunday 06:00 UTC
  schedule:
    - cron: "0 6 * * 0"

# Prevent overlapping housekeeping executions (e.g., manual + scheduled)
concurrency:
  group: housekeeping-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

jobs:
  housekeeping:
    runs-on: ubuntu-latest

    steps:
      # --------------------------------------------------------
      # Resolve configuration (supports manual and scheduled runs)
      # --------------------------------------------------------
      - name: Resolve inputs / defaults
        id: cfg
        env:
          RET_DAYS_IN:   ${{ inputs.retention_days }}
          NTL_DAYS_IN:   ${{ inputs.nightly_artifact_retention_days }}
          DEL_RUNS_IN:   ${{ inputs.delete_runs }}
          DEL_ARTS_IN:   ${{ inputs.delete_artifacts }}
          DRY_RUN_IN:    ${{ inputs.dry_run }}
        run: |
          set -euo pipefail
          # When scheduled (no workflow_dispatch), inputs are empty; set defaults.
          RETENTION_DAYS="${RET_DAYS_IN:-14}"
          NIGHTLY_DAYS="${NTL_DAYS_IN:-7}"
          DELETE_RUNS="${DEL_RUNS_IN:-true}"
          DELETE_ARTIFACTS="${DEL_ARTS_IN:-true}"
          # For scheduled runs, default dry_run to false; for manual, respect input.
          DRY_RUN="${DRY_RUN_IN:-false}"

          # Basic sanity for bounds (defensive hardening)
          for n in "$RETENTION_DAYS" "$NIGHTLY_DAYS"; do
            if ! [[ "$n" =~ ^[0-9]+$ ]]; then
              echo "::error::retention values must be integers"; exit 1
            fi
          done
          if (( RETENTION_DAYS < 1 )); then
            echo "::warning::retention_days < 1 coerced to 1"; RETENTION_DAYS=1
          fi
          if (( NIGHTLY_DAYS < 1 )); then
            echo "::warning::nightly_artifact_retention_days < 1 coerced to 1"; NIGHTLY_DAYS=1
          fi

          echo "retention_days=${RETENTION_DAYS}"                 >> "$GITHUB_OUTPUT"
          echo "nightly_retention_days=${NIGHTLY_DAYS}"           >> "$GITHUB_OUTPUT"
          echo "delete_runs=${DELETE_RUNS}"                       >> "$GITHUB_OUTPUT"
          echo "delete_artifacts=${DELETE_ARTIFACTS}"             >> "$GITHUB_OUTPUT"
          echo "dry_run=${DRY_RUN}"                               >> "$GITHUB_OUTPUT"

          echo "Configuration:"
          echo "  retention_days (general)       = ${RETENTION_DAYS}"
          echo "  nightly_retention_days         = ${NIGHTLY_DAYS}"
          echo "  delete_runs                    = ${DELETE_RUNS}"
          echo "  delete_artifacts               = ${DELETE_ARTIFACTS}"
          echo "  dry_run                        = ${DRY_RUN}"

      # --------------------------------------------------------
      # Delete COMPLETED workflow runs older than retention_days
      # --------------------------------------------------------
      - name: Housekeep workflow RUNS
        id: runs
        if: ${{ steps.cfg.outputs.delete_runs == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const retentionDays = parseInt(process.env.RETENTION_DAYS || '14', 10);
            const dryRun        = (process.env.DRY_RUN === 'true');
            const cutoffMs      = Date.now() - retentionDays*24*60*60*1000;
            const cutoffIso     = new Date(cutoffMs).toISOString();

            const { owner, repo } = context.repo;
            core.info(`Deleting COMPLETED runs older than ${retentionDays} days (cutoff=${cutoffIso}, dry_run=${dryRun})`);

            let deleted = 0, scanned = 0, page = 1;
            for (;;) {
              const { data } = await github.rest.actions.listWorkflowRunsForRepo({
                owner, repo, per_page: 100, page, status: 'completed'
              });
              const runs = data.workflow_runs || [];
              if (!runs.length) break;

              for (const run of runs) {
                scanned++;
                const updatedAt = new Date(run.updated_at).getTime();
                if (updatedAt < cutoffMs) {
                  core.info(`- OLD run #${run.id} "${run.name}" updated_at=${run.updated_at}`);
                  if (!dryRun) {
                    await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                  }
                  deleted++;
                }
              }
              page++;
            }

            core.notice(`Runs scanned: ${scanned} | Runs deleted: ${deleted} | dry_run=${dryRun}`);
            core.setOutput('scanned', String(scanned));
            core.setOutput('deleted', String(deleted));
        env:
          RETENTION_DAYS:  ${{ steps.cfg.outputs.retention_days }}
          DRY_RUN:         ${{ steps.cfg.outputs.dry_run }}

      # --------------------------------------------------------
      # Delete artefacts with dual retention:
      #   - Nightly artefacts (elis-nightly-*) : nightly_retention_days
      #   - Others                             : retention_days
      # --------------------------------------------------------
      - name: Housekeep ARTEFACTS (dual retention)
        id: arts
        if: ${{ steps.cfg.outputs.delete_artifacts == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const generalDays = parseInt(process.env.RETENTION_DAYS || '14', 10);
            const nightlyDays = parseInt(process.env.NIGHTLY_RETENTION_DAYS || '7', 10);
            const dryRun      = (process.env.DRY_RUN === 'true');

            const now = Date.now();
            const cutoffGeneralMs = now - generalDays*24*60*60*1000;
            const cutoffNightlyMs = now - nightlyDays*24*60*60*1000;
            const cutoffGeneralIso = new Date(cutoffGeneralMs).toISOString();
            const cutoffNightlyIso = new Date(cutoffNightlyMs).toISOString();

            const { owner, repo } = context.repo;
            core.info(`Deleting artefacts (dry_run=${dryRun})`);
            core.info(`- Nightly   : name =~ ^elis-nightly-  older than ${nightlyDays} days (cutoff=${cutoffNightlyIso})`);
            core.info(`- General   : all others older than ${generalDays} days (cutoff=${cutoffGeneralIso})`);

            // Patterns treated as "nightly"
            const isNightly = (name) => {
              if (!name) return false;
              return name === 'elis-nightly-artefacts' || name.startsWith('elis-nightly-');
            };

            let scanned = 0, deletedTotal = 0, deletedNightly = 0, deletedGeneral = 0, page = 1;

            for (;;) {
              const { data } = await github.rest.actions.listArtifactsForRepo({
                owner, repo, per_page: 100, page
              });
              const arts = data.artifacts || [];
              if (!arts.length) break;

              for (const art of arts) {
                scanned++;
                const updatedAtMs = new Date(art.updated_at).getTime();
                const nightly = isNightly(art.name);
                const cutoffMs = nightly ? cutoffNightlyMs : cutoffGeneralMs;

                if (updatedAtMs < cutoffMs) {
                  core.info(`- OLD artefact #${art.id} name="${art.name}" updated_at=${art.updated_at} (category=${nightly?'nightly':'general'})`);
                  if (!dryRun) {
                    await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: art.id });
                  }
                  deletedTotal++;
                  if (nightly) deletedNightly++; else deletedGeneral++;
                }
              }
              page++;
            }

            core.notice(`Artefacts scanned: ${scanned} | deleted_total: ${deletedTotal} (nightly=${deletedNightly}, general=${deletedGeneral}) | dry_run=${dryRun}`);
            core.setOutput('scanned', String(scanned));
            core.setOutput('deleted_total', String(deletedTotal));
            core.setOutput('deleted_nightly', String(deletedNightly));
            core.setOutput('deleted_general', String(deletedGeneral));
        env:
          RETENTION_DAYS:           ${{ steps.cfg.outputs.retention_days }}
          NIGHTLY_RETENTION_DAYS:   ${{ steps.cfg.outputs.nightly_retention_days }}
          DRY_RUN:                  ${{ steps.cfg.outputs.dry_run }}

      # --------------------------------------------------------
      # Rich summary in the Actions UI (Step Summary)
      # --------------------------------------------------------
      - name: Summary
        run: |
          {
            echo "## Housekeeping completed"
            echo ""
            echo "### Retention"
            echo "- General retention: **${{ steps.cfg.outputs.retention_days }}** days"
            echo "- Nightly retention: **${{ steps.cfg.outputs.nightly_retention_days }}** days"
            echo ""
            echo "### Runs"
            echo "- Scanned: **${{ steps.runs.outputs.scanned || '0' }}**"
            echo "- Deleted: **${{ steps.runs.outputs.deleted || '0' }}**"
            echo ""
            echo "### Artefacts"
            echo "- Scanned: **${{ steps.arts.outputs.scanned || '0' }}**"
            echo "- Deleted (total): **${{ steps.arts.outputs.deleted_total || '0' }}**"
            echo "  - Nightly: **${{ steps.arts.outputs.deleted_nightly || '0' }}**"
            echo "  - General: **${{ steps.arts.outputs.deleted_general || '0' }}**"
            echo ""
            echo "### Dry run"
            echo "- **${{ steps.cfg.outputs.dry_run }}**"
          } >> "$GITHUB_STEP_SUMMARY"
