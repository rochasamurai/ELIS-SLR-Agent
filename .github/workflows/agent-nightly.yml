name: ELIS - Agent Nightly
# =============================================================================
# Purpose
#   Run the ELIS SLR Agent every night to (re)generate Appendix B/C artefacts
#   from Appendix A; commit them to a dedicated branch; push; and open/refresh
#   a PR into `main`. Also uploads B/C as a run artifact.
#
# Why this change
#   Prevents "local changes would be overwritten by checkout" by preparing/
#   resetting the write branch BEFORE running the agent (and ensuring a clean
#   working tree). Uses a GitHub App token so pushes/PRs are first-class events.
#
# Schedule
#   All cron times are in UTC. Adjust as required.
# =============================================================================

on:
  schedule:
    - cron: "30 02 * * *"   # 02:30 UTC daily
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  nightly:
    runs-on: ubuntu-latest

    steps:
      # --- Repository checkout (no default token persisted) -------------------
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          persist-credentials: false

      # --- Auth: mint short-lived GitHub App token ----------------------------
      - name: Mint GitHub App token
        id: app
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ELIS_APP_ID }}
          private-key: ${{ secrets.ELIS_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      # --- Git author ---------------------------------------------------------
      - name: Configure git author
        run: |
          git config user.name "elis-bot"
          git config user.email "elis-bot@users.noreply.github.com"

      # --- Prepare work branch BEFORE writing --------------------------------
      # Ensures a clean tree, then creates/resets ci/agent-autopr from remote.
      - name: Prepare work branch (create/reset before writing)
        env:
          WRITE_BRANCH: ci/agent-autopr
        run: |
          set -eux
          git fetch origin --prune

          if git ls-remote --exit-code --heads origin "$WRITE_BRANCH"; then
            # Branch exists remotely: recreate local branch tracking the remote.
            git checkout -B "$WRITE_BRANCH" "origin/$WRITE_BRANCH"
          else
            # First ever run: create a new branch from current HEAD (main).
            git checkout -b "$WRITE_BRANCH"
          fi

          # Ensure absolutely clean working tree before the agent writes files.
          git reset --hard
          git clean -fdx

      # --- Python runtime -----------------------------------------------------
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install runtime (best-effort)
        run: |
          python -m pip install -r requirements.txt || true

      # --- Run the agent (writes ONLY B & C artefacts) ------------------------
      - name: Run ELIS Agent (B/C from Appendix A)
        run: |
          python - <<'PY'
          import json
          from scripts import agent
          result = agent.run()
          print(json.dumps(result, indent=2))
          PY

      # --- Upload artefacts for convenience ----------------------------------
      - name: Upload artefacts (json_jsonl/)
        uses: actions/upload-artifact@v4
        with:
          name: elis-agent-artefacts
          path: |
            json_jsonl/ELIS_Appendix_B_Screening_rows.json
            json_jsonl/ELIS_Appendix_C_DataExtraction_rows.json
            json_jsonl/ELIS_Appendix_C_Extraction_rows.json
          if-no-files-found: warn

      # --- Commit only when there are actual changes --------------------------
      - name: Commit artefacts to branch
        run: |
          set -eux
          git add \
            json_jsonl/ELIS_Appendix_B_Screening_rows.json \
            json_jsonl/ELIS_Appendix_C_DataExtraction_rows.json \
            json_jsonl/ELIS_Appendix_C_Extraction_rows.json || true

          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          git commit -m "feat(agent-nightly): refresh Appendix B/C artefacts"
          echo "changed=true" >> "$GITHUB_OUTPUT"

      # --- Push branch (with App token) --------------------------------------
      - name: Push work branch
        if: always()  # safe even if nothing changed (no-op push)
        env:
          GH_TOKEN: ${{ steps.app.outputs.token }}
          WRITE_BRANCH: ci/agent-autopr
        run: |
          set -eux
          git push --force-with-lease \
            https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }} \
            HEAD:${WRITE_BRANCH}

      # --- Open/refresh PR (only if branch differs from main) -----------------
      - name: Open/refresh PR to main
        uses: actions/github-script@v7
        env:
          WRITE_BRANCH: ci/agent-autopr
        with:
          github-token: ${{ steps.app.outputs.token }}
          script: |
            const base = 'main';
            const head = process.env.WRITE_BRANCH;
            const { data: cmp } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base,
              head
            });

            if ((cmp.total_commits ?? 0) === 0 && (cmp.files?.length ?? 0) === 0) {
              core.info('No diff vs main; not opening a PR.');
              return;
            }

            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${head}`,
              base
            });

            if (prs.length) {
              core.info(`PR already open: #${prs[0].number}`);
              return;
            }

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'feat(agent-nightly): add B/C artefacts from Appendix A',
              head,
              base,
              body: 'Automated nightly agent run.'
            });
            core.info(`Opened PR #${pr.number}`);
