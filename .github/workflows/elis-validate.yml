name: ELIS - Validate
# =============================================================================
# Purpose
#   Run the JSON artefact validator and publish a Markdown report under
#   validation_reports/validation-report.md. When the report changes, open or
#   update a small PR from 'ci/validation-report' into 'main'.
#
# Why this change
#   - Use a GitHub App installation token for write operations (push/PR).
#   - Avoid failures when there are no changes (graceful no-op).
#   - Do not open a report PR from inside another PR run (cleaner UX).
#
# Triggers
#   - pull_request to main: run validation, upload the report artifact (no PR).
#   - push: run validation; if report changed, (create/update) PR.
#   - manual dispatch: same as push behaviour.
# =============================================================================

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ "**" ]
  workflow_dispatch: {}

permissions:
  contents: write        # needed to push the report branch
  pull-requests: write   # needed to create/update the report PR

jobs:
  validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1) Get a GitHub App token so we can push and open PRs reliably
      - name: Mint installation token (GitHub App)
        id: app
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ELIS_APP_ID }}
          private-key: ${{ secrets.ELIS_APP_PRIVATE_KEY }}

      # 2) Checkout the current ref (PR head or push ref) using the App token
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app.outputs.token }}
          fetch-depth: 0

      # 3) Set up Python and runtime deps for validator
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 4) Run validator (script writes a deterministic report path)
      - name: Run validator (non-blocking)
        run: |
          set -eux
          python scripts/validate_json.py
          test -f validation_reports/validation-report.md

      # 5) Always upload the report file as an artifact for easy viewing
      - name: Upload validation report artifact
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: validation_reports/validation-report.md
          if-no-files-found: error

      # 6) Create/update the report PR ONLY on push/manual (not on PR runs)
      #    'peter-evans/create-pull-request' succeeds and no-ops when there are
      #    no changes; using App token avoids permission issues on PR contexts.
      - name: Create/Update PR with report (changed only)
        if: ${{ github.event_name != 'pull_request' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.app.outputs.token }}
          commit-message: "ci(validate): update validation report"
          title: "ci(validate): update validation report"
          body: |
            Automated validation report update.
            This PR is opened/updated only when the report content changes.
          branch: ci/validation-report
          base: main
          add-paths: |
            validation_reports/validation-report.md
          signoff: false
          delete-branch: false
          draft: false

      # 7) Log PR number if one was created/updated (purely informational)
      - name: Report PR link (if any)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo "pull_request_number=${{ steps.create_pull_request.outputs.pull-request-number || 'none' }}"
          echo "pull_request_url=${{ steps.create_pull_request.outputs.pull-request-url || 'none' }}"
