name: ELIS – Validate
# =============================================================================
# Purpose
#   Validate A/B/C artefacts against JSON Schemas and, when the report changes,
#   publish it via a small PR (branch: ci/validation-report).
#
# Key behaviour
#   • Non-blocking: validation issues never fail CI.
#   • Always produce a report (or a small fallback).
#   • Open/refresh a PR ONLY when files under validation_reports/ changed.
#     (Prevents red runs when there’s no diff.)
# =============================================================================

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - "schemas/**"
      - "scripts/validate_json.py"
      - ".github/workflows/elis-validate.yml"

permissions:
  contents: write        # needed to push the PR branch
  pull-requests: write   # needed to open/update the PR

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout without persisting default token (we pass tokens explicitly)
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      # 2) Python + deps for the validator
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install validator dependency
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install jsonschema==4.23.0
          fi

      # 3) Run the validator (non-blocking)
      - name: Run validator (non-blocking)
        run: |
          python scripts/validate_json.py || echo "::warning ::validator returned non-zero (tolerated by CI)"

      # 4) Ensure a report exists (fallback if validator didn’t create one)
      - name: Ensure validation report exists
        run: |
          set -e
          mkdir -p validation_reports
          if [ ! -f validation_reports/validation-report.md ]; then
            {
              echo "# ELIS Validation Report (fallback)"
              echo
              echo "_No validator output; fallback created by CI._"
            } > validation_reports/validation-report.md
          fi

      # 5) Detect whether anything under validation_reports/ actually changed
      - name: Detect report changes
        id: diff
        run: |
          set -e
          # Show diff status for debugging
          git status --porcelain -- validation_reports || true
          # Compare working tree vs HEAD for report content only
          if git diff --quiet HEAD -- validation_reports; then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "No changes detected under validation_reports/."
          else
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            echo "Changes detected under validation_reports/."
          fi

      # 6) Configure git identity (used only if we will create/update a PR)
      - name: Configure Git identity
        if: ${{ steps.diff.outputs.has_changes == 'true' }}
        run: |
          git config user.name  "elis-bot"
          git config user.email "elis-bot@users.noreply.github.com"

      # 7) Clean remote report branch (only when we plan to create/refresh the PR)
      - name: Clean remote validation branch (if exists)
        if: ${{ steps.diff.outputs.has_changes == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -e
          if git ls-remote --exit-code --heads "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git" ci/validation-report > /dev/null 2>&1; then
            echo "Remote 'ci/validation-report' exists — deleting to avoid non-FF issues."
            git push "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git" :ci/validation-report
          else
            echo "No remote 'ci/validation-report' branch to delete."
          fi

      # 8) Create PR with report (only if there are changes)
      - name: Create PR with report
        if: ${{ steps.diff.outputs.has_changes == 'true' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ci/validation-report
          base: main
          title: "ci(validate): update validation report"
          body: |
            Automated validation report generated by **ELIS – Validate**.
            This PR is non-blocking by design and contains only files under `validation_reports/`.
          commit-message: "ci(validate): update validation report"
          add-paths: |
            validation_reports/** 
          delete-branch: true

      # 9) No-op report (keeps job green without a PR)
      - name: No report changes — PR not required
        if: ${{ steps.diff.outputs.has_changes != 'true' }}
        run: echo "Report unchanged. Skipping PR creation."
