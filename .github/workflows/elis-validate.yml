name: ELIS – Validate
# =============================================================================
# Purpose
#   Validate A/B/C artefacts against JSON Schemas and publish a Markdown report
#   via a small PR (branch: ci/validation-report). This job is non-blocking by
#   design; validation issues should not block merges.
#
# Why this version fixes your error
#   • Ensures 'contents' and 'pull-requests' write permissions.
#   • Uses checkout with 'persist-credentials: false' to avoid token conflicts.
#   • Always creates a validation report (writes a fallback if needed).
#   • Proactively deletes the remote 'ci/validation-report' branch (if present)
#     to avoid non-fast-forward push errors caused by divergent histories.
#   • Uses peter-evans/create-pull-request to commit ONLY the report files and
#     auto-delete the branch after merge (keeps history clean).
# =============================================================================

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - "schemas/**"
      - "scripts/validate_json.py"
      - ".github/workflows/elis-validate.yml"

permissions:
  contents: write        # needed to push the PR branch
  pull-requests: write   # needed to open/update the PR

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout the repository without keeping the default credentials
      #    (we will pass tokens explicitly to steps that need them).
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      # 2) Set up Python and install runtime deps for the validator.
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install validator dependency
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install jsonschema==4.23.0
          fi

      # 3) Run the validator. It is non-blocking by design, but we still allow
      #    any non-zero to be tolerated explicitly (extra safety).
      - name: Run validator (non-blocking)
        run: |
          python scripts/validate_json.py || echo "::warning ::validator returned non-zero (tolerated by CI)"

      # 4) Ensure a report exists even if the validator failed to create one.
      - name: Ensure validation report exists
        run: |
          set -e
          mkdir -p validation_reports
          if [ ! -f validation_reports/validation-report.md ]; then
            echo "# ELIS Validation Report (fallback)" > validation_reports/validation-report.md
            echo "" >> validation_reports/validation-report.md
            echo "_No validator output; fallback created by CI._" >> validation_reports/validation-report.md
          fi

      # 5) Configure Git identity for any direct git operations in this job.
      - name: Configure Git identity
        run: |
          git config user.name  "elis-bot"
          git config user.email "elis-bot@users.noreply.github.com"

      # 6) PRE-CLEAN (important):
      #    Remove the remote 'ci/validation-report' branch if it exists to avoid
      #    non-fast-forward push errors due to divergent or unrelated histories.
      - name: Clean remote validation branch (if exists)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -e
          if git ls-remote --exit-code --heads "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git" ci/validation-report > /dev/null 2>&1; then
            echo "Remote 'ci/validation-report' exists — deleting to avoid non-FF issues."
            git push "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git" :ci/validation-report
          else
            echo "No remote 'ci/validation-report' branch to delete."
          fi

      # 7) Create or update a PR that contains ONLY the validation report files.
      - name: Create PR with report
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ci/validation-report
          base: main
          title: "ci(validate): update validation report"
          body: |
            Automated validation report generated by **ELIS – Validate**.

            This PR is non-blocking by design and contains only files under `validation_reports/`.
          commit-message: "ci(validate): update validation report"
          add-paths: |
            validation_reports/**
          delete-branch: true
