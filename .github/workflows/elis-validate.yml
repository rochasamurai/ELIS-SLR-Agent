# ============================================================
# Workflow: ELIS - Validate
# Purpose:
#   - Run the validator and generate a Markdown report.
#   - Always ensure a report exists and publish it as an artifact.
#   - Create a PR with the report and auto-merge it.
#   - Prevent duplicate workflow runs when the bot commits/merges.
# ============================================================

name: ELIS - Validate

on:
  pull_request:                # Run when a PR is opened/updated against main
    branches: [main]
  workflow_dispatch:           # Allow manual runs from GitHub UI

permissions:
  contents: write
  pull-requests: write

jobs:
  validate:
    # Avoid running when triggered by the bot itself
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest

    concurrency:
      group: elis-validate
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run validator (always continue)
        run: python scripts/validate_json.py || echo "::warning ::validator returned non-zero"

      - name: Ensure report exists (or create fallback)
        run: |
          mkdir -p validation_reports
          if ! ls validation_reports/*.md 1>/dev/null 2>&1; then
            ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            fn="validation_reports/$(date +%Y-%m-%d_%H%M%S)_validation_report.md"
            printf "# ðŸ“‘ ELIS Validation Report\n**Generated:** %s  \n**Note:** fallback report.\n" "$ts" > "$fn"
          fi
          ls -la validation_reports

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: validation_report
          path: validation_reports/*.md
          if-no-files-found: error

      - name: Create PR with report
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ci/validation-report
          title: "chore: add validation report"
          commit-message: "chore: add validation report [skip ci]"
          body: "Automatic validation report generated by workflow."
          add-paths: validation_reports/*.md
          delete-branch: true

      - name: Show PR outputs
        run: |
          echo "PR number: ${{ steps.cpr.outputs.pull-request-number }}"
          echo "PR url   : ${{ steps.cpr.outputs.pull-request-url }}"
          echo "Operation: ${{ steps.cpr.outputs.pull-request-operation }}"

      - name: Merge PR via REST API (squash)
        if: steps.cpr.outputs.pull-request-number != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          resp=$(curl -sS -X PUT \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/merge" \
            -d '{"merge_method":"squash","commit_title":"chore: add validation report [skip ci]"}' \
            || true)
          echo "$resp"
          if echo "$resp" | grep -q '"merged": true'; then
            echo "::notice ::PR merged successfully."
          else
            echo "::notice ::No changes to merge or PR already closed."
          fi
