# ============================================================
# Workflow: ELIS - Validate (PR-based, respects branch protection)
# Purpose:
#   - Run the validation script and ensure a Markdown report exists.
#   - Upload the report as an artifact.
#   - Open a Pull Request with the report and merge it automatically via API.
#   - Verify the report has landed in validation_reports/ on main.
# ============================================================

name: ELIS - Validate

on:
  push:
    branches: [main]
    paths:
      - 'scripts/validate_json.py'
      - '.github/workflows/elis-validate.yml'
      - 'docs/**'
      - 'schemas/**'
      - 'json_jsonl/**'
  workflow_dispatch:

permissions:
  contents: write        # commit/merge
  pull-requests: write   # open/merge PRs

jobs:
  validate:
    # Prevent loops (ignore the Actions bot)
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest

    concurrency:
      group: elis-validate
      cancel-in-progress: true

    steps:
      # --- Checkout repository ---
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- Python toolchain ---
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # --- Install dependencies ---
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # --- Run validator; do not fail on non-blocking findings ---
      - name: Run validator (always continue)
        run: python scripts/validate_json.py || echo "::warning ::validator returned non-zero"

      # --- Ensure a report exists; create a fallback if missing ---
      - name: Ensure report exists (or create fallback)
        run: |
          mkdir -p validation_reports
          if ! ls validation_reports/*.md 1>/dev/null 2>&1; then
            ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            fn="validation_reports/$(date +%Y-%m-%d_%H%M%S)_validation_report.md"
            printf "# ðŸ“‘ ELIS Validation Report\n**Generated:** %s  \n**Note:** fallback report.\n" "$ts" > "$fn"
          fi
          echo "==> validation_reports content:"; ls -la validation_reports

      # --- Publish artifact for convenient download ---
      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: validation_report
          path: validation_reports/*.md
          if-no-files-found: error

      # --- Create a PR with the report (handles protected main) ---
      - name: Create PR with report
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ci/validation-report
          title: "chore: add validation report"
          commit-message: "chore: add validation report [skip ci]"
          body: "Automatic validation report generated by workflow."
          add-paths: validation_reports/*.md
          delete-branch: true

      # --- Show PR outputs (useful for debugging/no-op) ---
      - name: Show PR outputs
        run: |
          echo "operation  : ${{ steps.cpr.outputs.pull-request-operation }}"   # created/updated/closed/none
          echo "PR number  : ${{ steps.cpr.outputs.pull-request-number }}"
          echo "PR url     : ${{ steps.cpr.outputs.pull-request-url }}"

      # --- Merge the PR via REST API (squash); respects branch protection rules ---
      - name: Merge PR via REST API (squash)
        if: steps.cpr.outputs.pull-request-number != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          echo "Merging PR #${PR_NUMBER} in ${REPO}"
          resp=$(curl -sS -X PUT \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/merge" \
            -d '{"merge_method":"squash","commit_title":"chore: add validation report [skip ci]"}')
          echo "$resp"
          echo "$resp" | grep -q '"merged": true' || { echo "::error ::PR merge failed"; exit 1; }

      # --- Verify the report landed on main after the merge ---
      - name: Verify report landed on main
        run: |
          git fetch origin main --depth=1
          git checkout main
          echo "==> Files in validation_reports on main:"; ls -la validation_reports
          test -n "$(ls -1 validation_reports/*.md 2>/dev/null)" || { echo "::error ::No .md report on main"; exit 1; }
