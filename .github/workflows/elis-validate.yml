name: ELIS - Validate
# =============================================================================
# Purpose
#   Validate ELIS artefacts (Appendix A/B/C) against the MVP schemas and
#   generate a Markdown report. If the report content changed vs last commit,
#   create/update a PR from 'ci/validation-report' into 'main'.
#
# Why this configuration (prevents loops)
#   - Triggers only on pushes to 'main' (and manual runs).
#   - Uses a 'paths' filter so edits to 'validation_reports/**' DO NOT retrigger.
#   - Concurrency collapses back-to-back runs to the newest one.
#
# CI triggering for the PR
#   The PR branch is updated via a GitHub App token so your normal CI
#   workflows run on that PR automatically.
#
# Requirements
#   - Secret 'ELIS_GITHUB_APP_TOKEN' containing a fine-scoped App installation
#     token with 'contents:write' and 'pull_requests:write'.
# =============================================================================

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    # Only run when sources that affect validation change.
    paths:
      - 'json_jsonl/**'
      - 'schemas/**'
      - 'scripts/validate_json.py'
      - '.github/workflows/elis-validate.yml'
      # DO NOT include 'validation_reports/**' to avoid loops.

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: validate-${{ github.ref }}
  cancel-in-progress: true

env:
  BASE_BRANCH: main
  WRITE_BRANCH: ci/validation-report

jobs:
  validate:
    name: validate
    runs-on: ubuntu-latest

    steps:
      # -----------------------------------------------------------------------
      # Checkout 'main' exactly; we validate current main and compare the report
      # with the last committed report in the repository history.
      # -----------------------------------------------------------------------
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BASE_BRANCH }}
          persist-credentials: false  # we’ll push with an App token later

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install validator deps (deterministic)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run validator (generate report)
        run: |
          python scripts/validate_json.py
        # The script writes validation_reports/validation-report.md

      # Stage the report and detect whether content actually changed.
      - name: Stage report and detect diff
        id: diff
        shell: bash
        run: |
          set -eux
          git add -N validation_reports/validation-report.md
          if git diff --quiet -- validation_reports/validation-report.md; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      # Upload the report as a run artifact for quick inspection.
      - name: Upload report artifact
        if: steps.diff.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: validation_reports/validation-report.md

      # Create or update a PR only when there’s a substantive change.
      - name: Create / update PR with changed report
        if: steps.diff.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.ELIS_GITHUB_APP_TOKEN }}
          branch: ${{ env.WRITE_BRANCH }}
          base:  ${{ env.BASE_BRANCH }}
          commit-message: |
            ci(validate): update validation report
          title: "ci(validate): validation report"
          body: |
            Automated validation report.
            This PR opens only when the report content changes vs the last report commit.
          # Limit the PR to the report file to avoid unrelated noise.
          add-paths: |
            validation_reports/validation-report.md
          delete-branch: true
