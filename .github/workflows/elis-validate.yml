# ============================================================
# Workflow: ELIS - Validate
# Purpose:
#   - Run the validation script (scripts/validate_json.py).
#   - Ensure a Markdown report exists in validation_reports/.
#   - Upload the report as an artifact.
#   - Open a Pull Request with the report.
#   - Attempt auto-merge (squash) via REST API; if review is required,
#     leave the PR open and auto-request review.
#   - Verify that the report actually landed on main (only if merged).
# Notes:
#   - Comments in UK English. Ready to paste into .github/workflows/.
#   - Uses only the built-in GITHUB_TOKEN (no extra secrets).
# ============================================================

name: ELIS - Validate

# ------------------------------------------------------------
# Triggers
# ------------------------------------------------------------
on:
  push:                         # Run on pushes to main that affect key paths
    branches: [ main ]
    paths:
      - 'scripts/validate_json.py'
      - '.github/workflows/elis-validate.yml'
      - 'docs/**'
      - 'schemas/**'
      - 'json_jsonl/**'
  workflow_dispatch: {}         # Allow manual execution from GitHub UI

# ------------------------------------------------------------
# Permissions (workflow-level)
# ------------------------------------------------------------
permissions:
  contents: write       # Needed to push/merge changes via PR
  pull-requests: write  # Needed to create/request-review/merge PRs

jobs:
  validate:
    # Avoid self-trigger loops when the workflow creates commits as github-actions[bot]
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest

    # Only one validation run at a time (new run cancels the previous one)
    concurrency:
      group: elis-validate
      cancel-in-progress: true

    # Reinforce permissions at job level (defensive; mirrors workflow-level)
    permissions:
      contents: write
      pull-requests: write

    steps:
      # --------------------------------------------------------
      # Checkout repository (full history required for PR ops)
      # --------------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --------------------------------------------------------
      # Setup Python 3.11
      # --------------------------------------------------------
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # --------------------------------------------------------
      # Install dependencies (tolerant if requirements.txt absent)
      # --------------------------------------------------------
      - name: Install dependencies (tolerant)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt; continuing."
          fi

      # --------------------------------------------------------
      # Run validator (do not fail the workflow on non-zero exit)
      # --------------------------------------------------------
      - name: Run validator (always continue)
        run: |
          python scripts/validate_json.py || echo "::warning ::validator returned non-zero"

      # --------------------------------------------------------
      # Ensure at least one Markdown report exists; create fallback if missing
      # --------------------------------------------------------
      - name: Ensure report exists (or create fallback)
        run: |
          set -euo pipefail
          mkdir -p validation_reports
          if ! ls validation_reports/*.md 1>/dev/null 2>&1; then
            ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            fn="validation_reports/$(date -u +%Y-%m-%d_%H%M%S)_validation_report.md"
            printf "# ðŸ“‘ ELIS Validation Report\n**Generated:** %s  \n**Note:** fallback report.\n" "$ts" > "$fn"
          fi
          echo "==> validation_reports content:"; ls -la validation_reports

      # --------------------------------------------------------
      # Upload report(s) as a workflow artifact (for easy download)
      # --------------------------------------------------------
      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: validation_report
          path: validation_reports/*.md
          if-no-files-found: error

      # --------------------------------------------------------
      # Create a PR with the report (branch auto-created; auto-deleted on merge)
      # --------------------------------------------------------
      - name: Create PR with report
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ci/validation-report
          title: "chore: add validation report"
          commit-message: "chore: add validation report [skip ci]"
          body: "Automatic validation report generated by workflow."
          add-paths: validation_reports/*.md
          delete-branch: true

      # --------------------------------------------------------
      # Show create-pull-request outputs (debug visibility)
      # --------------------------------------------------------
      - name: Show PR outputs
        run: |
          echo "PR number: ${{ steps.cpr.outputs.pull-request-number }}"
          echo "PR url   : ${{ steps.cpr.outputs.pull-request-url }}"
          echo "Changes? : ${{ steps.cpr.outputs.pull-request-operation }}"  # created/updated/closed/none

      # --------------------------------------------------------
      # Request review automatically from repository owner
      # --------------------------------------------------------
      - name: Request review on PR
        if: steps.cpr.outputs.pull-request-number != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
          OWNER: ${{ github.repository_owner }}
        run: |
          curl -sS -X POST \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/requested_reviewers" \
            -d "{\"reviewers\":[\"${OWNER}\"]}" || true

      # --------------------------------------------------------
      # Try to auto-merge the PR (squash). If approval is required,
      # do not fail the run; leave the PR open and exit gracefully.
      # --------------------------------------------------------
      - name: Merge PR via REST API (squash; tolerate review requirement)
        id: merge
        if: steps.cpr.outputs.pull-request-number != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          echo "Merging PR #${PR_NUMBER} in ${REPO}"
          resp=$(curl -sS -X PUT \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/merge" \
            -d '{"merge_method":"squash","commit_title":"chore: add validation report [skip ci]"}' || true)
          echo "$resp"
          if echo "$resp" | grep -q '"merged": true'; then
            echo "merged=true" >> "$GITHUB_OUTPUT"
          elif echo "$resp" | grep -q 'approving review is required'; then
            echo "::notice ::PR #${PR_NUMBER} awaiting required approval; leaving it open."
            echo "merged=false" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::PR merge failed for another reason."
            exit 1
          fi

      # --------------------------------------------------------
      # Verify that the report actually landed on main (only if merged)
      # --------------------------------------------------------
      - name: Verify report landed on main
        if: steps.merge.outputs.merged == 'true'
        run: |
          git fetch origin main --depth=1
          git checkout main
          echo "==> HEAD of main:"; git log -1 --pretty=oneline
          echo "==> Files in validation_reports on main:"; ls -la validation_reports
          test -n "$(ls -1 validation_reports/*.md 2>/dev/null)" || { echo "::error ::No .md report on main"; exit 1; }
