# ============================================================
# Workflow: ELIS - Validate (final)
# Purpose:
#   - Run the validation script and always produce a Markdown report.
#   - Upload the report as an artifact.
#   - Commit the report directly to the main branch (no PR), avoiding loops.
#   - Verify that the report actually landed in the repository.
# ============================================================

name: ELIS - Validate

on:
  # Run automatically when relevant areas change on main
  push:
    branches: [main]
    paths:
      - 'scripts/validate_json.py'
      - '.github/workflows/elis-validate.yml'
      - 'docs/**'
      - 'schemas/**'
      - 'json_jsonl/**'
  # Allow manual execution from the Actions tab
  workflow_dispatch:

permissions:
  contents: write   # required for committing the report back to the repo

jobs:
  validate:
    # Prevent infinite loops (skip bot commits and report-bot commits)
    if: |
      !contains(github.event.head_commit.message, '[report-bot]') &&
      github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest

    # Ensure only one run of this workflow executes at a time
    concurrency:
      group: elis-validate
      cancel-in-progress: true

    steps:
      # --- Checkout repository (full history for verification) ---
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- Python toolchain ---
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # --- Install dependencies ---
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # --- Run validator; do not fail job on non-blocking findings ---
      - name: Run validator (always continue)
        run: python scripts/validate_json.py || echo "::warning ::validator returned non-zero"

      # --- Ensure a report exists; create a fallback if missing ---
      - name: Ensure report exists (or create fallback)
        run: |
          mkdir -p validation_reports
          if ! ls validation_reports/*.md 1>/dev/null 2>&1; then
            ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            fn="validation_reports/$(date +%Y-%m-%d_%H%M%S)_validation_report.md"
            printf "# ðŸ“‘ ELIS Validation Report\n**Generated:** %s  \n**Note:** fallback report.\n" "$ts" > "$fn"
          fi
          echo "==> validation_reports content:"; ls -la validation_reports

      # --- Publish the report as an artifact (for easy download) ---
      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: validation_report
          path: validation_reports/*.md
          if-no-files-found: error

      # --- Commit the report directly to main (no PR; avoids duplication) ---
      - name: Commit report to main (direct, no PR)
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: add validation report [skip ci][report-bot]"
          file_pattern: "validation_reports/*.md"
          branch: main
          push_options: --no-verify

      # --- Verify the report actually landed on main ---
      - name: Verify report landed on main
        run: |
          git fetch origin main --depth=1
          git checkout main
          echo "==> HEAD of main:"; git log -1 --pretty=oneline
          echo "==> Files in validation_reports on main:"; ls -la validation_reports
          test -n "$(ls -1 validation_reports/*.md 2>/dev/null)" || { echo "::error ::No .md report on main"; exit 1; }
