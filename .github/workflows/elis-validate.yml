# ============================================================
# Workflow: ELIS - Validate
# Objetivo:
#   - Rodar o script de validaÃ§Ã£o (validate_json.py).
#   - Garantir que sempre exista um relatÃ³rio .md em validation_reports/.
#   - Publicar o relatÃ³rio como artefato.
#   - Criar um Pull Request com o relatÃ³rio.
#   - Mesclar o PR automaticamente via API (se aprovado pelas regras).
#   - Verificar que o relatÃ³rio realmente entrou na branch main.
# ============================================================

name: ELIS - Validate

# ------------------------------------------------------------
# Disparadores (triggers)
# ------------------------------------------------------------
on:
  push:                         # Quando houver push na branch main
    branches: [main]
    paths:                      # Somente se arquivos crÃ­ticos forem alterados
      - 'scripts/validate_json.py'
      - '.github/workflows/elis-validate.yml'
      - 'docs/**'
      - 'schemas/**'
      - 'json_jsonl/**'
  workflow_dispatch:             # Permite execuÃ§Ã£o manual via GitHub UI

# ------------------------------------------------------------
# PermissÃµes necessÃ¡rias para o job rodar corretamente
# ------------------------------------------------------------
permissions:
  contents: write       # NecessÃ¡rio para commit/merge de relatÃ³rios
  pull-requests: write  # NecessÃ¡rio para abrir/mesclar PRs

jobs:
  validate:
    # Evita execuÃ§Ã£o duplicada quando o autor Ã© o prÃ³prio bot do GitHub
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest

    # Concurrency garante que apenas 1 workflow deste tipo rode por vez
    concurrency:
      group: elis-validate
      cancel-in-progress: true

    steps:
      # --------------------------------------------------------
      # Checkout do repositÃ³rio
      # --------------------------------------------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # NecessÃ¡rio para histÃ³rico completo

      # --------------------------------------------------------
      # Setup Python 3.11
      # --------------------------------------------------------
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # --------------------------------------------------------
      # Instala dependÃªncias do projeto
      # --------------------------------------------------------
      - name: Install deps
        run: python -m pip install --upgrade pip && pip install -r requirements.txt

      # --------------------------------------------------------
      # Executa o script de validaÃ§Ã£o
      # NÃ£o falha o pipeline em caso de erro menor (warnings apenas)
      # --------------------------------------------------------
      - name: Run validator (always continue)
        run: python scripts/validate_json.py || echo "::warning ::validator returned non-zero"

      # --------------------------------------------------------
      # Garante que sempre exista um relatÃ³rio .md
      # Se o script nÃ£o gerar, cria um fallback
      # --------------------------------------------------------
      - name: Ensure report (create if missing) + list
        run: |
          mkdir -p validation_reports
          if ! ls validation_reports/*.md 1>/dev/null 2>&1; then
            ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            fn="validation_reports/$(date +%Y-%m-%d_%H%M%S)_validation_report.md"
            printf "# ðŸ“‘ ELIS Validation Report\n**Generated:** %s  \n**Note:** fallback report.\n" "$ts" > "$fn"
          fi
          echo "==> validation_reports content:"; ls -la validation_reports

      # --------------------------------------------------------
      # Publica o relatÃ³rio como artifact
      # --------------------------------------------------------
      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: validation_report
          path: validation_reports/*.md
          if-no-files-found: error

      # --------------------------------------------------------
      # Cria um Pull Request com o relatÃ³rio
      # --------------------------------------------------------
      - name: Create PR with report
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ci/validation-report
          title: "chore: add validation report"
          commit-message: "chore: add validation report [skip ci]"
          body: "Automatic validation report generated by workflow."
          add-paths: validation_reports/*.md
          delete-branch: true

      # --------------------------------------------------------
      # Exibe informaÃ§Ãµes do PR criado
      # --------------------------------------------------------
      - name: Show PR outputs
        run: |
          echo "PR number: ${{ steps.cpr.outputs.pull-request-number }}"
          echo "PR url   : ${{ steps.cpr.outputs.pull-request-url }}"
          echo "Changes? : ${{ steps.cpr.outputs.pull-request-operation }}"  # created/updated/closed/none

      # --------------------------------------------------------
      # Mescla o PR automaticamente via API REST do GitHub
      # Usa squash para manter histÃ³rico limpo
      # --------------------------------------------------------
      - name: Merge PR via REST API (squash)
        if: steps.cpr.outputs.pull-request-number != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          echo "Merging PR #${PR_NUMBER} in ${REPO}"
          resp=$(curl -sS -X PUT \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/merge" \
            -d '{"merge_method":"squash","commit_title":"chore: add validation report [skip ci]"}')
          echo "$resp"
          echo "$resp" | grep -q '"merged": true' || { echo "::error ::PR merge failed"; exit 1; }

      # --------------------------------------------------------
      # Verifica se o relatÃ³rio realmente entrou na branch main
      # Se nÃ£o houver .md, falha o job
      # --------------------------------------------------------
      - name: Verify report landed on main
        run: |
          git fetch origin main --depth=1
          git checkout main
          echo "==> HEAD of main:"; git log -1 --pretty=oneline
          echo "==> Files in validation_reports on main:"; ls -la validation_reports
          test -n "$(ls -1 validation_reports/*.md 2>/dev/null)" || { echo "::error ::No .md report on main"; exit 1; }
