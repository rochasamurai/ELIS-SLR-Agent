name: ELIS - Validate

on:
  push: { branches: [main] }           # roda em push na main
  pull_request: { branches: [main] }   # roda em PRs contra main
  workflow_dispatch:                   # permite rodar manualmente

# O GitHub Actions injeta um token temporário em cada run: secrets.GITHUB_TOKEN
# As permissões abaixo definem o que esse token pode fazer via API:
permissions:
  contents: write          # criar commits/arquivos no repositório
  pull-requests: write     # abrir/atualizar/mesclar PRs

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout do repositório
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # 2) Python 3.11
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      # 3) Dependências
      - name: Install deps
        run: python -m pip install --upgrade pip && pip install -r requirements.txt

      # 4) Roda o validador (não falha o job se retornar código != 0)
      - name: Run validator (always continue)
        run: python scripts/validate_json.py || echo "::warning ::validator returned non-zero"

      # 5) Garante que exista um relatório (cria fallback com timestamp se faltou)
      - name: Ensure report (or create fallback)
        run: |
          mkdir -p validation_reports
          if ! ls validation_reports/*.md 1>/dev/null 2>&1; then
            ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            fn="validation_reports/$(date +%Y-%m-%d_%H%M%S)_validation_report.md"
            printf "# 📑 ELIS Validation Report\n**Generated:** %s  \n**Note:** fallback report.\n" "$ts" > "$fn"
          fi
          echo "==> Files in validation_reports"; ls -la validation_reports

      # 6) Publica o relatório como artifact do run (opcional, para download)
      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: validation_report
          path: validation_reports/*.md
          if-no-files-found: error

      # 7) Cria um PR contendo o(s) relatório(s) gerado(s)
      - name: Create PR with report
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ci/validation-report                # branch temporária
          title: "chore: add validation report"
          commit-message: "chore: add validation report [skip ci]"
          body: "Automatic validation report generated by workflow."
          add-paths: validation_reports/*.md
          delete-branch: true

      # 8) Mescla o PR chamando a API REST do GitHub com o GITHUB_TOKEN
      #    - GH_TOKEN recebe secrets.GITHUB_TOKEN (token temporário da run)
      #    - PUT /repos/{owner}/{repo}/pulls/{number}/merge (rota oficial)
      - name: Merge PR via REST API
        if: steps.cpr.outputs.pull-request-number != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}                 # token injetado pela plataforma
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
          REPO: ${{ github.repository }}                        # owner/repo atual
        run: |
          echo "Merging PR #${PR_NUMBER} in ${REPO}"
          curl -sS -X PUT \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/merge" \
            -d '{"merge_method":"squash","commit_title":"chore: add validation report [skip ci]"}'
