# ============================================================
# Workflow: ELIS - Housekeeping
# Purpose:
#   - Clean up old workflow runs and artifacts to keep the repo lean.
#   - Default behaviour: delete COMPLETED runs and artifacts older than N days.
# Triggers:
#   - Manual (workflow_dispatch) with options.
#   - Weekly schedule (Sunday 06:00 UTC).
# Permissions:
#   - actions: write (required to delete runs/artifacts)
#   - contents: read
# Notes:
#   - Uses GITHUB_TOKEN only (no extra secrets).
#   - Dry-run supported to preview deletions.
# ============================================================

name: ELIS - Housekeeping

on:
  workflow_dispatch:
    inputs:
      retention_days:
        description: "Delete items older than this many days"
        type: number
        default: 14
        required: true
      delete_runs:
        description: "Delete COMPLETED workflow runs older than retention_days"
        type: boolean
        default: true
        required: true
      delete_artifacts:
        description: "Delete artifacts older than retention_days"
        type: boolean
        default: true
        required: true
      dry_run:
        description: "Preview only (do not delete)"
        type: boolean
        default: true
        required: true

  # Weekly schedule: Sunday 06:00 UTC
  schedule:
    - cron: "0 6 * * 0"

permissions:
  actions: write
  contents: read

jobs:
  housekeeping:
    runs-on: ubuntu-latest

    steps:
      # --------------------------------------------------------
      # Resolve configuration (supports manual and scheduled runs)
      # --------------------------------------------------------
      - name: Resolve inputs / defaults
        id: cfg
        env:
          RET_DAYS_IN: ${{ inputs.retention_days }}
          DEL_RUNS_IN: ${{ inputs.delete_runs }}
          DEL_ARTS_IN: ${{ inputs.delete_artifacts }}
          DRY_RUN_IN:  ${{ inputs.dry_run }}
        run: |
          set -euo pipefail
          # When scheduled (no workflow_dispatch), inputs are empty.
          RETENTION_DAYS="${RET_DAYS_IN:-14}"
          DELETE_RUNS="${DEL_RUNS_IN:-true}"
          DELETE_ARTIFACTS="${DEL_ARTS_IN:-true}"
          DRY_RUN="${DRY_RUN_IN:-false}"

          echo "retention_days=${RETENTION_DAYS}"        >> "$GITHUB_OUTPUT"
          echo "delete_runs=${DELETE_RUNS}"              >> "$GITHUB_OUTPUT"
          echo "delete_artifacts=${DELETE_ARTIFACTS}"    >> "$GITHUB_OUTPUT"
          echo "dry_run=${DRY_RUN}"                      >> "$GITHUB_OUTPUT"

          echo "Configuration:"
          echo "  retention_days = ${RETENTION_DAYS}"
          echo "  delete_runs    = ${DELETE_RUNS}"
          echo "  delete_artifacts = ${DELETE_ARTIFACTS}"
          echo "  dry_run        = ${DRY_RUN}"

      # --------------------------------------------------------
      # Delete COMPLETED workflow runs older than retention_days
      # --------------------------------------------------------
      - name: Housekeep workflow RUNS
        if: ${{ steps.cfg.outputs.delete_runs == 'true' }}
        uses: actions/github-script@v7
        env:
          GH_TOKEN:        ${{ secrets.GITHUB_TOKEN }}
          RETENTION_DAYS:  ${{ steps.cfg.outputs.retention_days }}
          DRY_RUN:         ${{ steps.cfg.outputs.dry_run }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const retentionDays = parseInt(process.env.RETENTION_DAYS, 10);
            const dryRun        = (process.env.DRY_RUN === 'true');
            const cutoffMs      = Date.now() - retentionDays*24*60*60*1000;

            const { owner, repo } = context.repo;
            core.info(`Deleting COMPLETED runs older than ${retentionDays} days (dry_run=${dryRun})`);

            let deleted = 0, scanned = 0, page = 1;
            while (true) {
              const { data } = await github.rest.actions.listWorkflowRunsForRepo({
                owner, repo, per_page: 100, page, status: 'completed'
              });
              const runs = data.workflow_runs || [];
              if (!runs.length) break;

              for (const run of runs) {
                scanned++;
                const updatedAt = new Date(run.updated_at).getTime();
                if (updatedAt < cutoffMs) {
                  core.info(`- OLD run #${run.id} (${run.name}) updated_at=${run.updated_at}`);
                  if (!dryRun) {
                    await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                  }
                  deleted++;
                }
              }
              page++;
            }
            core.notice(`Runs scanned: ${scanned} | Runs deleted: ${deleted} | dry_run=${dryRun}`);

      # --------------------------------------------------------
      # Delete artifacts older than retention_days
      # --------------------------------------------------------
      - name: Housekeep ARTIFACTS
        if: ${{ steps.cfg.outputs.delete_artifacts == 'true' }}
        uses: actions/github-script@v7
        env:
          GH_TOKEN:        ${{ secrets.GITHUB_TOKEN }}
          RETENTION_DAYS:  ${{ steps.cfg.outputs.retention_days }}
          DRY_RUN:         ${{ steps.cfg.outputs.dry_run }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const retentionDays = parseInt(process.env.RETENTION_DAYS, 10);
            const dryRun        = (process.env.DRY_RUN === 'true');
            const cutoffMs      = Date.now() - retentionDays*24*60*60*1000;

            const { owner, repo } = context.repo;
            core.info(`Deleting artifacts older than ${retentionDays} days (dry_run=${dryRun})`);

            let deleted = 0, scanned = 0, page = 1;
            while (true) {
              const { data } = await github.rest.actions.listArtifactsForRepo({
                owner, repo, per_page: 100, page
              });
              const arts = data.artifacts || [];
              if (!arts.length) break;

              for (const art of arts) {
                scanned++;
                const updatedAt = new Date(art.updated_at).getTime();
                if (updatedAt < cutoffMs) {
                  core.info(`- OLD artifact #${art.id} name=${art.name} updated_at=${art.updated_at}`);
                  if (!dryRun) {
                    await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: art.id });
                  }
                  deleted++;
                }
              }
              page++;
            }
            core.notice(`Artifacts scanned: ${scanned} | Artifacts deleted: ${deleted} | dry_run=${dryRun}`);

      # --------------------------------------------------------
      # Summary line in logs
      # --------------------------------------------------------
      - name: Summary
        run: |
          echo "Housekeeping completed."
          echo "Retention: ${{ steps.cfg.outputs.retention_days }} days"
          echo "Deleted runs? ${{ steps.cfg.outputs.delete_runs }}"
          echo "Deleted artifacts? ${{ steps.cfg.outputs.delete_artifacts }}"
          echo "Dry run: ${{ steps.cfg.outputs.dry_run }}"
