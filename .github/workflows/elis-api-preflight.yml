# .github/workflows/elis-api-preflight.yml
name: ELIS – API Preflight

on:
  workflow_dispatch:
    inputs:
      provider:
        description: "Which API to test (scopus | ieee | wos)"
        required: true
        default: "scopus"

permissions:
  contents: read

jobs:
  preflight:
    runs-on: ubuntu-latest
    env:
      SCOPUS_API_KEY: ${{ secrets.SCOPUS_API_KEY }}
      IEEE_EXPLORE_API_KEY: ${{ secrets.IEEE_EXPLORE_API_KEY }}
      WEB_OF_SCIENCE_API_KEY: ${{ secrets.WEB_OF_SCIENCE_API_KEY }}

    steps:
      - name: Resolve inputs
        id: cfg
        run: |
          set -euo pipefail
          PROV="${{ inputs.provider }}"
          case "$PROV" in
            scopus|ieee|wos) ;;
            *) echo "Unsupported provider: $PROV"; exit 2 ;;
          esac
          echo "prov=$PROV" >> "$GITHUB_OUTPUT"

      - name: Preflight selected provider
        id: run
        run: |
          set -euo pipefail
          PROV="${{ steps.cfg.outputs.prov }}"
          TMP_BODY="$(mktemp)"
          HTTP=000

          case "$PROV" in
            scopus)
              # Simple metadata ping (1 record)
              HTTP="$(curl -sS -o "$TMP_BODY" -w '%{http_code}' \
                -H "X-ELS-APIKey: ${SCOPUS_API_KEY:?missing SCOPUS_API_KEY}" \
                "https://api.elsevier.com/content/search/scopus?query=TITLE-ABS-KEY(election)&count=1")"
              ;;

            ieee)
              # Basic IEEE Xplore search (1 record)
              : "${IEEE_EXPLORE_API_KEY:?missing IEEE_EXPLORE_API_KEY}"
              HTTP="$(curl -sS -o "$TMP_BODY" -w '%{http_code}' \
                "https://ieeexploreapi.ieee.org/api/v1/search/articles?apikey=${IEEE_EXPLORE_API_KEY}&format=json&max_records=1&querytext=blockchain")"
              ;;

            wos)
              # WoS Lite: expect 200 only after subscription approval
              : "${WEB_OF_SCIENCE_API_KEY:?missing WEB_OF_SCIENCE_API_KEY}"
              HTTP="$(curl -sS -o "$TMP_BODY" -w '%{http_code}' \
                -H "X-ApiKey: ${WEB_OF_SCIENCE_API_KEY}" \
                "https://api.clarivate.com/api/woslite?databaseId=WOS&usrQuery=TS=(election)&count=1")"
              ;;
          esac

          # Truncate preview to keep logs tidy
          PREVIEW="$(head -c 500 "$TMP_BODY" | tr -d '\000')"
          echo "http=$HTTP" >> "$GITHUB_OUTPUT"
          echo "preview<<EOF" >> "$GITHUB_OUTPUT"
          echo "$PREVIEW" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          # Exit non-zero on hard network errors (HTTP code still printed)
          test -s "$TMP_BODY"

      - name: Step Summary
        run: |
          PROV="${{ steps.cfg.outputs.prov }}"
          HTTP="${{ steps.run.outputs.http }}"
          PREVIEW="${{ steps.run.outputs.preview }}"
          {
            printf "## API Preflight\n\n"
            printf "- Provider: **%s**\n" "$PROV"
            printf "- HTTP status: **%s**\n\n" "$HTTP"

            printf "### Quick interpretation\n"
            if [ "$HTTP" = "200" ]; then
              printf "✅ Key and endpoint look **OK**.\n\n"
            elif [ "$HTTP" = "401" ] || [ "$HTTP" = "403" ]; then
              printf "⚠️  **Not authorised**. For WoS this is normal until approval; otherwise check the key/entitlements.\n\n"
            elif [ "$HTTP" = "429" ]; then
              printf "⚠️  **Rate limited**. Reduce caps or raise ELIS_HTTP_SLEEP_S.\n\n"
            else
              printf "ℹ️  Received HTTP %s – see response preview below.\n\n" "$HTTP"
            fi

            printf "### Response preview (first 500 bytes)\n"
            printf "%s\n" '```'
            printf "%s\n" "$PREVIEW"
            printf "%s\n" '```'
          } >> "$GITHUB_STEP_SUMMARY"

          # Make the job fail on clearly bad HTTP codes to surface issues in the run badge
          case "$HTTP" in
            200) exit 0 ;;
            401|403|429) exit 1 ;;
            *) exit 1 ;;
          esac
