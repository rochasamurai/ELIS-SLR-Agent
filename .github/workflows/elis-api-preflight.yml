name: ELIS - API Preflight
# =============================================================================
# Purpose
#   Tiny, on-demand connectivity check against a single provider chosen in UI:
#     - Scopus (Elsevier)
#     - IEEE Xplore
#     - Web of Science (Clarivate)
#
# Behaviour
#   - Dispatch-only (manual run).
#   - Choice input `provider`, optional `query`.
#   - Minimal request (count/max_records=1), polite and safe.
#   - Never prints secrets (no `set -x`); only HTTP status is logged.
#   - Fails the job on non-200 so issues are visible at a glance.
#
# Notes
#   - Implemented with curl only (no heredocs), eliminating shell heredoc pitfalls.
#   - You can extend providers by adding new `case` arms and UI options.
# =============================================================================

on:
  workflow_dispatch:
    inputs:
      provider:
        description: "Choose a single provider to test"
        type: choice
        required: true
        options:
          - scopus
          - ieee
          - wos
        default: scopus
      query:
        description: "Tiny test query"
        required: false
        default: "electoral integrity"

permissions:
  contents: read

concurrency:
  group: api-preflight-${{ github.ref }}
  cancel-in-progress: false

jobs:
  preflight:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # Resolve inputs (avoid using inputs.* directly in YAML keys)
      - name: Resolve inputs
        id: cfg
        run: |
          echo "provider=${{ github.event.inputs.provider }}" >> "$GITHUB_OUTPUT"
          echo "query=${{ github.event.inputs.query }}"       >> "$GITHUB_OUTPUT"

      # Provider-specific minimal HTTP checks (no secrets printed)
      - name: Preflight selected provider
        id: ping
        env:
            PROVIDER: ${{ steps.cfg.outputs.provider }}
            QUERY:    ${{ steps.cfg.outputs.query }}
            # Secrets mapped to env for safe use in curl (not echoed)
            SCOPUS_API_KEY:       ${{ secrets.SCOPUS_API_KEY }}
            IEEE_API_KEY:         ${{ secrets.IEEE_EXPLORE_API_KEY }}
            WOS_API_KEY:          ${{ secrets.WEB_OF_SCIENCE_API_KEY }}
        run: |
          set -euo pipefail

          status="0"
          note=""

          case "${PROVIDER}" in
            scopus)
              # Elsevier Scopus: header X-ELS-APIKey; JSON result; 200 on success.
              url='https://api.elsevier.com/content/search/scopus'
              status="$(curl -s -o /dev/null -w "%{http_code}" \
                --get "${url}" \
                -H "X-ELS-APIKey: ${SCOPUS_API_KEY}" \
                -H "Accept: application/json" \
                --data-urlencode "query=TITLE-ABS-KEY(${QUERY}) AND PUBYEAR > 1989" \
                --data-urlencode "count=1")"
              note="Scopus HTTP ${status}"
              ;;
            ieee)
              # IEEE Xplore: apiKey is a query param; use --get + --data-urlencode (no echo).
              url='https://ieeexploreapi.ieee.org/api/v1/search/articles'
              status="$(curl -s -o /dev/null -w "%{http_code}" \
                --get "${url}" \
                --data-urlencode "apikey=${IEEE_API_KEY}" \
                --data-urlencode "query=${QUERY}" \
                --data-urlencode "max_records=1")"
              note="IEEE Xplore HTTP ${status}"
              ;;
            wos)
              # Web of Science: header X-ApiKey; product path may vary by subscription.
              base='https://api.clarivate.com/apis/wos'
              status="$(curl -s -o /dev/null -w "%{http_code}" \
                --get "${base}" \
                -H "X-ApiKey: ${WOS_API_KEY}" \
                --data-urlencode "databaseId=WOS" \
                --data-urlencode "usrQuery=TS=(${QUERY})" \
                --data-urlencode "count=1")"
              note="WoS HTTP ${status} (401/403 expected until product approval)"
              ;;
            *)
              echo "Unsupported provider: ${PROVIDER}" >&2
              exit 2
              ;;
          esac

          echo "provider=${PROVIDER}"  >> "$GITHUB_OUTPUT"
          echo "status=${status}"      >> "$GITHUB_OUTPUT"
          echo "note=${note}"          >> "$GITHUB_OUTPUT"

          # Non-200 should fail the job to surface issues clearly
          if [ "${status}" != "200" ]; then
            exit 1
          fi

      - name: Step Summary
        if: always()
        run: |
          PROV="${{ steps.ping.outputs.provider || 'unknown' }}"
          STAT="${{ steps.ping.outputs.status || 'n/a' }}"
          NOTE="${{ steps.ping.outputs.note || '' }}"

          {
            echo "## API Preflight"
            echo ""
            echo "- Provider: **${PROV}**"
            echo "- Timestamp: **$(date -u +%Y-%m-%dT%H:%M:%SZ)**"
            echo "- HTTP status: **${STAT}**"
            if [ -n "${NOTE}" ]; then
              echo "- Note: ${NOTE}"
            fi
            echo ""
            echo "### Hints"
            echo "- 200 =
