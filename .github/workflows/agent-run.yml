name: ELIS - Agent Run
# ============================================================================
# Purpose
#   Run the ELIS Agent from a chosen ref (branch or tag). The agent reads
#   Appendix A and writes ONLY Appendix B & C. The workflow then:
#     • commits B/C to a write branch (default: ci/agent-autopr)
#     • pushes the branch
#     • opens/reuses a PR into main
#     • uploads B/C as an artifact (downloadable)
#
# Why this fixes the 404:
#   The previous run tried to call the compare API with an empty head branch
#   (URL looked like .../compare/main...). Here we ALWAYS compute and export a
#   non-empty WRITE_BRANCH, push it first, and only then open the PR.
# ============================================================================

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref to run from (branch or tag)"
        required: false
        default: "main"
      base_branch:
        description: "Base branch for PR"
        required: false
        default: "main"
      write_branch:
        description: "Branch to push generated artefacts to"
        required: false
        default: "ci/agent-autopr"
      open_pr:
        description: "Open/refresh PR write_branch → base_branch"
        required: false
        default: "true"

permissions:
  contents: write
  pull-requests: write

jobs:
  agent-run:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1) Checkout the requested ref (branch or tag)
      - name: Checkout ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || 'main' }}
          fetch-depth: 0

      # 2) Set up Python and install runtime deps
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install runtime deps
        run: |
          set -eux
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 3) Run the agent (reads A; writes ONLY B & C)
      - name: Run ELIS Agent (B & C only)
        run: |
          set -eux
          python scripts/agent.py
          echo "Workspace JSON files:"
          ls -la json_jsonl || true

      # 4) Prepare/write branch; commit B/C; push
      - name: Commit and push B/C to write branch
        id: push
        env:
          BASE_BRANCH: ${{ github.event.inputs.base_branch || 'main' }}
          REQ_WRITE_BRANCH: ${{ github.event.inputs.write_branch || 'ci/agent-autopr' }}
        run: |
          set -eux

          # Configure author
          git config user.name  "elis-bot"
          git config user.email "elis-bot@users.noreply.github.com"

          # Stage ONLY B & C outputs
          git add -N json_jsonl/ELIS_Appendix_B_Screening_rows.json json_jsonl/ELIS_Appendix_C_Extraction_rows.json || true
          if git diff --name-only --exit-code -- json_jsonl/ELIS_Appendix_B_Screening_rows.json json_jsonl/ELIS_Appendix_C_Extraction_rows.json; then
            echo "No B/C changes to commit; skipping push and PR."
            echo "WRITE_BRANCH=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Decide write branch; if already exists remotely, suffix with timestamp
          WRITE_BRANCH="$REQ_WRITE_BRANCH"
          if git ls-remote --exit-code --heads origin "$WRITE_BRANCH" >/dev/null 2>&1; then
            TS="$(date -u +%Y%m%d-%H%M%S)"
            WRITE_BRANCH="${WRITE_BRANCH}-${TS}"
          fi

          # Create/checkout write branch from current ref (handles detached HEAD from tag)
          git checkout -b "$WRITE_BRANCH"

          # Add and commit B/C outputs
          git add json_jsonl/ELIS_Appendix_B_Screening_rows.json json_jsonl/ELIS_Appendix_C_Extraction_rows.json
          git commit -m "feat(agent): add B/C artefacts from ${GITHUB_REF_NAME:-ref}"

          # Push write branch
          git push origin HEAD:"$WRITE_BRANCH"

          # Export for later steps
          echo "WRITE_BRANCH=$WRITE_BRANCH" >> "$GITHUB_OUTPUT"

      # 5) Upload artefacts for convenience (download from the run)
      - name: Upload agent artefacts
        if: ${{ steps.push.outputs.WRITE_BRANCH != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: agent-artefacts
          path: |
            json_jsonl/ELIS_Appendix_B_Screening_rows.json
            json_jsonl/ELIS_Appendix_C_Extraction_rows.json

      # 6) Open or reuse PR (only if we actually pushed a branch)
      - name: Open/refresh PR
        if: ${{ github.event.inputs.open_pr == 'true' && steps.push.outputs.WRITE_BRANCH != '' }}
        uses: actions/github-script@v6
        env:
          BASE: ${{ github.event.inputs.base_branch || 'main' }}
          HEAD: ${{ steps.push.outputs.WRITE_BRANCH }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const base  = process.env.BASE || 'main';
            const head  = process.env.HEAD;  // set by previous step
            if (!head) {
              core.setFailed("WRITE_BRANCH not set; no commit was pushed.");
              return;
            }

            // If a PR already exists for this head → base, do nothing
            const { data: openPRs } = await github.rest.pulls.list({
              owner, repo, state: 'open', base, head: `${owner}:${head}`,
            });

            if (openPRs.length > 0) {
              core.info(`PR already open: #${openPRs[0].number}`);
            } else {
              const { data: pr } = await github.rest.pulls.create({
                owner, repo, base, head,
                title: "feat(agent): add B/C artefacts from Appendix A",
                body: "Automated agent run: B/C artefacts generated from current Appendix A input.",
              });
              core.info(`Opened PR #${pr.number}`);
            }
