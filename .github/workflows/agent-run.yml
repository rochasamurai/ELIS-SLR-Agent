name: ELIS - Agent Run
# ============================================================================
# Purpose
#   Run the ELIS Agent from a chosen ref (branch or tag). The agent reads
#   Appendix A and writes ONLY Appendix B & C. The workflow then:
#     • commits B/C to a write branch (default: ci/agent-autopr)
#     • pushes the branch
#     • opens/reuses a PR into main
#     • uploads B/C as an artifact (downloadable)
#
# Change log (ops-facing)
#   - 2025-10-10: Commit only files that actually exist (B and/or C). This avoids
#                 fatal errors when one of them is not produced in a run.
# ============================================================================

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: "Base branch to PR into"
        required: false
        default: "main"
      write_branch:
        description: "Branch to push artefacts to (auto PR)"
        required: false
        default: "ci/agent-autopr"
      open_pr:
        description: "Open/refresh PR write_branch → base_branch"
        required: false
        default: "true"

permissions:
  contents: write
  pull-requests: write

jobs:
  run-agent:
    runs-on: ubuntu-latest

    steps:
      # 0) Mint GitHub App installation token (this is what will trigger CI)
      - name: Mint installation token (GitHub App)
        id: app
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ELIS_APP_ID }}
          private-key: ${{ secrets.ELIS_APP_PRIVATE_KEY }}

      # 1) Checkout the repo using the App token; do NOT persist the default creds
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.base_branch || 'main' }}
          token: ${{ steps.app.outputs.token }}
          fetch-depth: 0
          persist-credentials: false

      # 2) Git identity + make sure pushes use the App token remote
      - name: Configure Git identity & remote (App token)
        run: |
          set -eux
          git config user.name  "elis-bot"
          git config user.email "elis-bot@users.noreply.github.com"
          git remote set-url origin \
            https://x-access-token:${{ steps.app.outputs.token }}@github.com/${{ github.repository }}.git

      # 3) Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install runtime (best-effort)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      # 4) Run agent – produces ONLY B & C from A
      - name: Run Toy Agent
        run: python scripts/agent.py

      # 5) List artefacts for debugging
      - name: List artefacts
        run: |
          echo "==> json_jsonl/"
          ls -l json_jsonl/ || true

      # 6) Upload artefacts as a build artefact (optional convenience)
      - name: Upload artefacts (json_jsonl/)
        uses: actions/upload-artifact@v4
        with:
          name: json_jsonl
          path: json_jsonl/
          if-no-files-found: warn
          retention-days: 7

      # 7) Prepare work branch (create or reuse)
      - name: Prepare work branch
        env:
          BASE:  ${{ github.event.inputs.base_branch }}
          HEAD:  ${{ github.event.inputs.write_branch }}
        run: |
          set -eux
          BASE="${BASE:-main}"
          HEAD="${HEAD:-ci/agent-autopr}"

          git fetch origin --prune
          if git ls-remote --exit-code --heads origin "$HEAD" >/dev/null 2>&1; then
            git checkout -B "$HEAD" "origin/$HEAD"
          else
            git checkout -B "$HEAD" "origin/$BASE"
          fi

      # 8) Commit ONLY existing B/C files
      - name: Commit artefacts to work branch
        run: |
          set -eux
          B="json_jsonl/ELIS_Appendix_B_Screening_rows.json"
          C="json_jsonl/ELIS_Appendix_C_Extraction_rows.json"

          ADD=()
          [ -f "$B" ] && ADD+=("$B")
          [ -f "$C" ] && ADD+=("$C")

          if [ "${#ADD[@]}" -eq 0 ]; then
            echo "No artefacts to commit; exiting early."
            exit 0
          fi

          git add "${ADD[@]}"
          if git diff --cached --quiet; then
            echo "No staged changes."
          else
            git commit -m "feat(agent): add B/C artefacts from Appendix A"
          fi

      # 9) Push using the App token remote
      - name: Push work branch
        run: |
          set -eux
          if [ -n "$(git log origin/HEAD..HEAD --oneline || true)" ]; then
            git push -u origin HEAD
          else
            echo "Branch already up to date."
          fi

      # 10) Open/refresh PR using the App token (this makes CI fire)
      - name: Open/refresh PR (write_branch → base_branch)
        if: ${{ github.event.inputs.open_pr == 'true' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.app.outputs.token }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const base  = core.getInput('base_branch')  || 'main';
            const head  = core.getInput('write_branch') || 'ci/agent-autopr';

            const { data: prs } = await github.rest.pulls.list({
              owner, repo, state: 'open', base, head: `${owner}:${head}`,
            });

            if (prs.length > 0) {
              core.info(`PR already open: #${prs[0].number}`);
              return;
            }

            const { data: pr } = await github.rest.pulls.create({
              owner, repo, base, head,
              title: "feat(agent): add B/C artefacts from Appendix A",
              body: "Automated agent run: B/C artefacts generated from current Appendix A input.",
            });
            core.info(`Opened PR #${pr.number}`);
