name: ELIS - Agent Run
on:
  workflow_dispatch:
  push:
    paths:
      - "schemas/**"
      - "scripts/**"
      - "docs/**"
      - "examples/**"
      - ".github/workflows/elis-agent-run-new.yml"

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: read

jobs:
  run-agent:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run ELIS Agent (writes to json_jsonl/)
        run: |
          python scripts/agent.py --out json_jsonl

      - name: Show repo status (debug)
        run: |
          git status --porcelain || true
          echo "Changed files:"
          git diff --name-only || true
          ls -la json_jsonl || true

      - name: Create PR with results
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "ELIS Agent: update artefacts in json_jsonl/"
          title: "ELIS Agent: automated update (Option A: json_jsonl/)"
          body: |
            This PR was created by the ELIS - Agent Run workflow.

            What's included
            - Generated/updated artefacts in `json_jsonl/` following Option A
            - Aligned with `validate_json.py` routing patterns

            How to verify
            1) Check the files under `json_jsonl/**`
            2) Ensure the “ELIS — Validate” workflow runs and passes
          branch: bot/elis-agent-update
          delete-branch: true
          labels: automated, elis-agent

      - name: Enable auto-merge (squash)
        if: ${{ steps.cpr.outputs.pull-request-number != '' }}
        uses: peter-evans/enable-pull-request-automerge@v3
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash

      - name: Verify PR (quick report)
        if: ${{ steps.cpr.outputs.pull-request-number != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = Number('${{ steps.cpr.outputs.pull-request-number }}');

            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
            const ref = pr.head.sha;

            const { data: checks } = await github.rest.checks.listForRef({ owner, repo, ref });
            const run = (checks.check_runs || []).find(c =>
              (c.name || '').toLowerCase().includes('validate')
            );

            const status = run ? run.status : 'not-found';
            const conclusion = run ? (run.conclusion || 'pending') : 'n/a';
            const merged = Boolean(pr.merged);
            const autoMergeEnabled = Boolean(pr.auto_merge);

            await core.summary
              .addHeading('ELIS Agent Quick Report')
              .addTable([
                [{ data: 'PR #', header: true }, String(prNumber)],
                [{ data: 'Validate status', header: true }, status],
                [{ data: 'Validate conclusion', header: true }, conclusion],
                [{ data: 'Auto-merge enabled', header: true }, String(autoMergeEnabled)],
                [{ data: 'Merged', header: true }, String(merged)],
              ])
              .write();

            core.info(`Quick report → PR #${prNumber} | Validate=${status}/${conclusion} | autoMerge=${autoMergeEnabled} | merged=${merged}`);
