# ============================================================
# ELIS - Bot Commit (direct to elis-bot via GitHub App)
# - Cria/atualiza arquivo em uma branch de trabalho (elis-bot),
#   comita e envia, e (opcional) abre PR para main.
# - Usa GitHub App (token via create-github-app-token).
# ============================================================

name: "ELIS - Bot Commit (direct to elis-bot via GitHub App)"

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: "Path to create/update (e.g., docs/NOTE.md)"
        required: true
        type: string
      content_raw:
        description: "File content (plain text)"
        required: true
        type: string
      commit_message:
        description: "Concise commit message"
        required: true
        type: string
      base_branch:
        description: "Base branch"
        required: false
        default: "main"
        type: string
      work_branch:
        description: "Working branch"
        required: false
        default: "elis-bot"
        type: string
      open_pr:
        description: "Open/refresh PR work->base"
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  commit-and-pr:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1) Obter token do GitHub App
      - name: "Mint installation token (GitHub App)"
        id: app
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ELIS_APP_ID }}
          private-key: ${{ secrets.ELIS_APP_PRIVATE_KEY }}

      # 2) Checkout da base
      - name: "Checkout base branch"
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.base_branch }}
          token: ${{ steps.app.outputs.token }}
          fetch-depth: 0

      # 3) Criar/trocar para a working branch
      - name: "Create/switch working branch"
        env:
          BASE: ${{ inputs.base_branch }}
          WORK: ${{ inputs.work_branch }}
        run: |
          set -euo pipefail
          git fetch origin "$BASE" --depth=1
          if git ls-remote --exit-code --heads origin "$WORK" >/dev/null 2>&1; then
            git checkout "$WORK"
            git merge --ff-only "origin/$BASE" || true
          else
            git checkout -b "$WORK" "origin/$BASE"
          fi
          echo "On branch: $(git rev-parse --abbrev-ref HEAD)"

      # 4) Escrever conteúdo do arquivo
      - name: "Write file content"
        env:
          FP: ${{ inputs.file_path }}
          CONTENT: ${{ inputs.content_raw }}
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$FP")"
          printf "%s\n" "$CONTENT" > "$FP"
          tail -c1 "$FP" | read -r _ || echo >> "$FP"
          test -s "$FP" || { echo "::error ::File not written: $FP"; exit 1; }
          echo "---- git status (pre-add) ----"
          git status --porcelain

      # 5) Commit & push apenas se houver mudanças
      - name: "Commit & push (only if changed)"
        id: commit_push
        env:
          WORK_BRANCH: ${{ inputs.work_branch }}
          COMMIT_MSG: ${{ inputs.commit_message }}
        run: |
          set -euo pipefail
          git add -A
          echo "---- git status (post-add) ----"
          git status --porcelain
          if git diff --cached --quiet; then
            echo "No changes to commit (index clean)."
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          git config user.name  "ELIS Bot"
          git config user.email "233278419+elis-bot@users.noreply.github.com"
          git commit -m "$COMMIT_MSG"
          echo "changed=true" >> "$GITHUB_OUTPUT"
          echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          git push origin "HEAD:${WORK_BRANCH}"
          echo "Pushed commit: $(git rev-parse --short HEAD)"

      # 6) Abrir/reativar PR (se houver mudanças)
      - name: "Open/refresh PR (work -> base)"
        if: ${{ inputs.open_pr && steps.commit_push.outputs.changed == 'true' }}
        uses: actions/github-script@v7
        env:
          HEAD_BRANCH: ${{ inputs.work_branch }}
          BASE_BRANCH: ${{ inputs.base_branch }}
          PR_TITLE: ${{ inputs.commit_message }}
        with:
          github-token: ${{ steps.app.outputs.token }}
          script: |
            const { owner, repo } = context.repo;
            const head = process.env.HEAD_BRANCH;
            const base = process.env.BASE_BRANCH;
            const title = process.env.PR_TITLE;
            const body  = 'Automated update by ELIS Bot.';
            const existing = await github.rest.pulls.list({
              owner, repo, state: 'open', head: `${owner}:${head}`, base
            });
            if (existing.data.length) {
              core.notice(`PR already open: #${existing.data[0].number}`);
            } else {
              const pr = await github.rest.pulls.create({ owner, repo, head, base, title, body });
              core.notice(`PR created: #${pr.data.number}`);
            }
