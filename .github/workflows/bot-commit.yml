# ============================================================================
# ELIS – Bot Commit (direct to elis-bot via GitHub App)
#
# Purpose
#   Create or update a single file on the working branch (`elis-bot`), commit it,
#   push it, and optionally open/refresh a pull request to `main`.
#
# Key behaviours
#   • Uses a GitHub App token (via create-github-app-token) for write access.
#   • Newline-safe: prefer `content_b64` (Base64). If using `content_raw`, literal
#     "\n" sequences are converted to real newlines. CRLF is normalised to LF.
#   • Idempotent: if the file content is unchanged, no commit is created.
#   • Rebases the working branch onto the current `main` to keep history clean.
#
# Usage
#   Trigger via `workflow_dispatch`. Required inputs: `file_path`, `commit_message`.
#   Provide exactly one of `content_b64` or `content_raw`.
#
# Notes
#   This workflow is intended for small, reviewable changes (docs/config/tests).
#   It must not modify unrelated files or bypass branch protection rules.
# ============================================================================

name: ELIS – Bot Commit (direct to elis-bot via GitHub App)

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: "Path to create/update (e.g., docs/NOTE.md)"
        required: true
      content_raw:
        description: "Plain text content. You may use \\n for newlines. (Leave empty if using content_b64.)"
        required: false
      content_b64:
        description: "Base64-encoded file content. Preferred for multi-line files."
        required: false
      commit_message:
        description: "Concise commit message"
        required: true
      base_branch:
        description: "Base branch to branch off"
        required: false
        default: "main"
      work_branch:
        description: "Working branch to push to"
        required: false
        default: "elis-bot"
      open_pr:
        description: "Open/refresh PR work→base"
        required: false
        default: "true"

permissions:
  contents: write
  pull-requests: write

jobs:
  bot-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.base_branch }}
          fetch-depth: 0

      - name: Prepare working branch from base
        run: |
          set -eux
          git fetch origin ${{ inputs.base_branch }}
          if git ls-remote --exit-code --heads origin ${{ inputs.work_branch }} >/dev/null 2>&1; then
            git fetch origin ${{ inputs.work_branch }}
            git checkout -B ${{ inputs.work_branch }} origin/${{ inputs.work_branch }}
            git rebase origin/${{ inputs.base_branch }}
          else
            git checkout -b ${{ inputs.work_branch }} origin/${{ inputs.base_branch }}
          fi

      - name: Write content to file (Base64 preferred)
        env:
          FILE_PATH: ${{ inputs.file_path }}
          RAW: ${{ inputs.content_raw }}
          B64: ${{ inputs.content_b64 }}
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$FILE_PATH")"
          if [ -n "${B64:-}" ]; then
            echo "$B64" | base64 -d > "$FILE_PATH"
          else
            # Interpret literal \n in RAW as newlines to avoid single-line files.
            printf "%b" "${RAW:-}" > "$FILE_PATH"
          fi
          # Normalise CRLF if any
          sed -i 's/\r$//' "$FILE_PATH"

      - name: Commit & push (if changed)
        env:
          MSG: ${{ inputs.commit_message }}
          FILE_PATH: ${{ inputs.file_path }}
        run: |
          set -eux
          git config user.name "elis-bot"
          git config user.email "elis-bot@users.noreply.github.com"
          if ! git diff --quiet -- "$FILE_PATH"; then
            git add "$FILE_PATH"
            git commit -m "$MSG"
            git push origin HEAD:${{ inputs.work_branch }}
          else
            echo "No changes detected — no commit."
          fi

      - name: Open or refresh PR
        if: ${{ inputs.open_pr == 'true' }}
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ${{ inputs.work_branch }}
          base: ${{ inputs.base_branch }}
          title: ${{ inputs.commit_message }}
          commit-message: ${{ inputs.commit_message }}
          body: "Automated update by ELIS Bot."
          labels: "automation"
