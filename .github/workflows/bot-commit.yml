name: ELIS - Bot Commit (direct to elis-bot via GitHub App)
# =============================================================================
# Purpose
#   Create/update ONE file on a working branch, commit & push it, and (optionally)
#   open/refresh a PR to main.
#
# Key traits
#   • Concurrency guard per work branch (prevents races).
#   • Hard-resets work branch to base (main) each run → no non-FF errors.
#   • Accepts EITHER Base64 OR raw text; normalises CRLF→LF.
#   • Idempotent commit; guarded PR (only if diff vs base).
# =============================================================================

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: "Path (relative to repo root) of the file to create/update"
        required: true
      content_b64:
        description: "File content in Base64 (leave empty if using raw)"
        required: false
        default: ""
      content_raw:
        description: "File content as raw text (leave empty if using Base64). '\\n' becomes newline."
        required: false
        default: ""
      commit_message:
        description: "Commit message (conventional-commit style)"
        required: true
      base_branch:
        description: "Base branch"
        required: false
        default: "main"
      work_branch:
        description: "Working branch"
        required: false
        default: "elis-bot"
      open_pr:
        description: "Open/refresh PR work_branch → base_branch"
        required: false
        default: "true"

permissions:
  contents: write
  pull-requests: write

# Prevent two jobs from pushing to the same work branch at the same time
concurrency:
  group: bot-commit-${{ inputs.work_branch }}
  cancel-in-progress: false

jobs:
  commit-file:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.base_branch }}
          fetch-depth: 0

      - name: Configure Git identity
        run: |
          git config user.name  "elis-bot"
          git config user.email "elis-bot@users.noreply.github.com"

      # Always make the work branch a fresh copy of base to avoid non-FF
      - name: Create/reset working branch from base
        env:
          BASE: ${{ inputs.base_branch }}
          HEAD: ${{ inputs.work_branch }}
        run: |
          set -eux
          git fetch origin --prune
          git checkout -B "$HEAD" "origin/$BASE"

      - name: Write file content (raw or base64) + normalise LF
        env:
          DEST: ${{ inputs.file_path }}
          B64: ${{ inputs.content_b64 }}
          RAW: ${{ inputs.content_raw }}
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$DEST")"
          # Exactly one content source must be provided
          if [ -n "$B64" ] && [ -n "$RAW" ]; then
            echo "::error ::Provide exactly ONE of content_b64 OR content_raw."; exit 1
          fi
          if [ -z "$B64" ] && [ -z "$RAW" ]; then
            echo "::error ::You must provide content_b64 OR content_raw."; exit 1
          fi
          if [ -n "$B64" ]; then
            echo "$B64" | base64 -d > "$DEST"
          else
            printf '%b' "$RAW" > "$DEST"
          fi
          # Convert CRLF → LF to keep CI stable
          perl -i -pe 's/\r$//' "$DEST"

      - name: Commit and force-push with lease (only if changed)
        env:
          DEST: ${{ inputs.file_path }}
          MSG:  ${{ inputs.commit_message }}
          HEAD: ${{ inputs.work_branch }}
        run: |
          set -euo pipefail
          git add "$DEST"
          if git diff --cached --quiet -- "$DEST"; then
            echo "No changes detected in $DEST — skipping commit."
            echo "HAS_COMMIT=false" >> "$GITHUB_ENV"
            # Still push the branch pointer so the remote exists (harmless)
            git push --force-with-lease origin HEAD:"$HEAD"
            exit 0
          fi
          git commit -m "$MSG"
          # Force-with-lease keeps us safe and avoids non-FF errors on the bot branch
          git push --force-with-lease origin HEAD:"$HEAD"
          echo "HAS_COMMIT=true" >> "$GITHUB_ENV"

      - name: Open/refresh PR (only when needed)
        if: ${{ inputs.open_pr == 'true' }}
        uses: actions/github-script@v6
        env:
          BASE: ${{ inputs.base_branch }}
          HEAD: ${{ inputs.work_branch }}
          HAS_COMMIT: ${{ env.HAS_COMMIT }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const base  = process.env.BASE || 'main';
            const head  = process.env.HEAD || 'elis-bot';
            const hasCommit = (process.env.HAS_COMMIT || 'false') === 'true';

            // If we didn't create a commit this run, check for any diff at all.
            if (!hasCommit) {
              const cmp = await github.rest.repos.compareCommitsWithBasehead({
                owner, repo, basehead: `${base}...${head}`,
              });
              const hasDiff = (cmp.data.ahead_by > 0) || (cmp.data.files && cmp.data.files.length > 0);
              if (!hasDiff) {
                core.info(`No commits/diff between ${base} and ${head} — skipping PR creation.`);
                return;
              }
            }

            // Open or reuse an existing PR
            const { data: openPRs } = await github.rest.pulls.list({
              owner, repo, state: 'open', base, head: `${owner}:${head}`,
            });
            if (openPRs.length > 0) {
              core.info(`PR already open: #${openPRs[0].number}`);
            } else {
              const title = process.env.GITHUB_EVENT_INPUTS_commit_message || "bot: update file";
              const { data: pr } = await github.rest.pulls.create({
                owner, repo, base, head, title,
                body: "Automated update via ELIS – Bot Commit.",
              });
              core.info(`Opened PR #${pr.number}`);
            }
