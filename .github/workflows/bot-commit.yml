# ELIS - Bot Commit and PR (auto-merge, no-PAT)
# Single-step implementation using actions/github-script:
# - Reads raw text from workflow inputs
# - Creates a branch, commits the file, opens a PR and enables auto-merge (squash)
# - Uses the built-in GITHUB_TOKEN; no PAT required

name: ELIS - Bot Commit and PR (auto-merge, no-PAT)

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: "Path to create/update (e.g., scripts/validate_json.py)"
        required: true
      content_raw:
        description: "Raw file content (paste full code here)"
        required: true
      commit_message:
        description: "Concise commit message (e.g., chore: add validator)"
        required: true
      target_branch:
        description: "Base branch"
        required: false
        default: "main"
      pr_title:
        description: "Pull Request title"
        required: false
        default: "Automated update"
      pr_body:
        description: "Pull Request body"
        required: false
        default: "Automated update by ELIS Bot."

jobs:
  commit-and-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Commit, PR and enable auto-merge (github-script)
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            // ---- Read and sanitise inputs -----------------------------------
            const pathInput = `${{ toJson(inputs.file_path) }}`.trim();
            const contentRaw = `${{ toJson(inputs.content_raw) }}`; // keep newlines verbatim
            const commitMessage = `${{ toJson(inputs.commit_message) }}`.trim();
            const baseBranch = `${{ toJson(inputs.target_branch) }}`.trim() || "main";
            const prTitle = `${{ toJson(inputs.pr_title) }}`.trim() || "Automated update";
            const prBody  = `${{ toJson(inputs.pr_body) }}`.trim()  || "Automated update by ELIS Bot.";

            // Drop accidental "file_path:" prefix and collapse slashes
            const filePath = pathInput.replace(/^file_path:\s*/i, "").replace(/\/+/g, "/").replace(/^\/|\/$/g, "");
            if (!filePath) core.setFailed("file_path is empty");
            if (!contentRaw) core.setFailed("content_raw is empty");

            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // ---- Resolve base branch SHA -------------------------------------
            const { data: refData } = await github.rest.git.getRef({
              owner, repo, ref: `heads/${baseBranch}`
            });
            const baseSha = refData.object.sha;

            // ---- Create a new branch name ------------------------------------
            const ts = new Date().toISOString().replace(/[-:TZ.]/g, "").slice(0,14);
            const safe = commitMessage.replace(/[^a-zA-Z0-9-_ ]/g,"").replace(/\s+/g,"-") || "update";
            const newBranch = `bot/${safe}-${ts}`;

            await github.rest.git.createRef({
              owner, repo,
              ref: `refs/heads/${newBranch}`,
              sha: baseSha
            });

            // ---- Create or update the file on the new branch -----------------
            // Get the file if it exists (to supply its sha), otherwise create new
            let currentSha = undefined;
            try {
              const { data: existing } = await github.rest.repos.getContent({
                owner, repo, path: filePath, ref: newBranch
              });
              if (Array.isArray(existing)) throw new Error("Path is a directory");
              currentSha = existing.sha;
            } catch (e) {
              // 404 means new file; ignore
            }

            await github.rest.repos.createOrUpdateFileContents({
              owner, repo, path: filePath, branch: newBranch,
              message: commitMessage,
              content: Buffer.from(contentRaw, "utf8").toString("base64"),
              sha: currentSha,
              committer: { name: "ELIS Bot", email: "233278419+elis-bot@users.noreply.github.com" },
              author:    { name: "ELIS Bot", email: "233278419+elis-bot@users.noreply.github.com" }
            });

            // ---- Open the PR -------------------------------------------------
            const { data: pr } = await github.rest.pulls.create({
              owner, repo,
              title: prTitle, body: prBody,
              head: newBranch, base: baseBranch
            });

            core.info(`PR #${pr.number} created: ${pr.html_url}`);

            // ---- Enable auto-merge (squash) ----------------------------------
            // Requires Auto-merge enabled in repo settings and permissions above.
            const enableAutoMerge = `
              mutation($prId: ID!) {
                enablePullRequestAutoMerge(input:{
                  pullRequestId: $prId,
                  mergeMethod: SQUASH
                }) { clientMutationId }
              }`;
            await github.graphql(enableAutoMerge, { prId: pr.node_id });
            core.info("Auto-merge enabled; PR will merge after required checks (if any).");
