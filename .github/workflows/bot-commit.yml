# ============================================================================
# Purpose
#   Create or update a single file on the working branch (`elis-bot`), commit it,
#   push it, and optionally open/refresh a pull request to `main`.
#
# Key behaviours
#   • Uses the default GITHUB_TOKEN for write access.
#   • Newline-safe: prefer `content_b64` (Base64). If using `content_raw`, literal
#     "\n" sequences are converted to real newlines. CRLF is normalised to LF.
#   • Idempotent: if the file content is unchanged, no commit is created.
#   • Keeps the `elis-bot` branch rebased on `main` for a clean history.
#
# Usage
#   Trigger via `workflow_dispatch`. Required inputs: `file_path`, `commit_message`.
#   Provide exactly one of `content_b64` or `content_raw`.
# ============================================================================

name: ELIS – Bot Commit (direct to elis-bot via GitHub App)

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: "Path (relative to repo root) of the file to create/update"
        required: true
      content_raw:
        description: "File content in base64 encoding"
        required: true
      commit_message:
        description: "Commit message (conventional style)"
        required: true
      base_branch:
        description: "Base branch name"
        required: false
        default: "main"
      work_branch:
        description: "Working branch name"
        required: false
        default: "elis-bot"
      open_pr:
        description: "Whether to open a pull request to the base branch"
        required: false
        default: "true"

jobs:
  commit-file:
    runs-on: ubuntu-latest
    steps:
      - name: Check out base branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.base_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Switch to work branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Fetch remote branches and switch to work branch (create if needed)
          git fetch origin
          if git show-ref --quiet refs/remotes/origin/${{ github.event.inputs.work_branch }}; then
            git checkout -B ${{ github.event.inputs.work_branch }} origin/${{ github.event.inputs.work_branch }}
          else
            git checkout -b ${{ github.event.inputs.work_branch }} ${{ github.event.inputs.base_branch }}
          fi
        shell: bash

      - name: Write file content
        run: |
          # Decode base64 content and normalize line endings to LF
          set -o pipefail
          echo "${{ github.event.inputs.content_raw }}" | base64 -d | sed 's/\r//g' > "${{ github.event.inputs.file_path }}"
        shell: bash

      - name: Commit changes
        run: |
          git add "${{ github.event.inputs.file_path }}"
          git commit -m "${{ github.event.inputs.commit_message }}"
          git push origin HEAD:${{ github.event.inputs.work_branch }}
        shell: bash

      - name: Open pull request
        if: ${{ github.event.inputs.open_pr == 'true' }}
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // Check if a PR from work_branch to base_branch already exists
            const { data: existingPRs } = await github.pulls.list({
              owner,
              repo,
              head: `${owner}:${github.event.inputs.work_branch}`,
              base: github.event.inputs.base_branch,
              state: 'open',
            });
            if (existingPRs.length === 0) {
              // Create a new PR
              await github.pulls.create({
                owner,
                repo,
                head: github.event.inputs.work_branch,
                base: github.event.inputs.base_branch,
                title: github.event.inputs.commit_message,
                body: 'Automated bot commit from workflow dispatch.',
              });
            } else {
              core.info('Pull request already exists for this branch.');
            }
