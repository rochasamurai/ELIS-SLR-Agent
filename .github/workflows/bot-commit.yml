# ELIS - Bot Commit (direct to elis-bot via GitHub App)
# Commits directly to the "elis-bot" branch using a repo-scoped installation token.
# The token is minted by the GitHub App using APP_ID + PRIVATE_KEY. No installation-id is needed;
# the action auto-detects the installation for the current repository.

name: ELIS - Bot Commit (direct to elis-bot via GitHub App)

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: "Path to create/update (e.g., scripts/validate_json.py)"
        required: true
      content_raw:
        description: "Raw file content (paste the full code here)"
        required: true
      commit_message:
        description: "Concise commit message (e.g., feat: add validator)"
        required: true
      base_branch:
        description: "Base branch to initialise elis-bot from (blank = repository default)"
        required: false
        default: ""

jobs:
  commit-direct:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # writes are performed via the App token

    steps:
      - name: Mint installation token (GitHub App)
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ELIS_APP_ID }}
          private-key: ${{ secrets.ELIS_APP_PRIVATE_KEY }}

      - name: Commit directly to elis-bot (github-script)
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const inPath  = ( ${{ toJson(inputs.file_path) }}      || "" ).trim();
            const inRaw   =   ${{ toJson(inputs.content_raw) }};
            const inMsg   = ( ${{ toJson(inputs.commit_message) }} || "" ).trim();
            const inBase  = ( ${{ toJson(inputs.base_branch) }}    || "" ).trim();
            if (!inPath)  { core.setFailed("file_path is empty"); return; }
            if (!inRaw)   { core.setFailed("content_raw is empty"); return; }
            if (!inMsg)   { core.setFailed("commit_message is empty"); return; }

            const filePath = inPath.replace(/^file_path:\s*/i, "").replace(/\/+/g, "/").replace(/^\/|\/$/g, "");
            const { owner, repo } = context.repo;

            // Resolve default base branch when blank
            let baseBranch = inBase;
            if (!baseBranch) {
              const { data: repoInfo } = await github.rest.repos.get({ owner, repo });
              baseBranch = repoInfo.default_branch || "main";
            }
            core.info(`Base branch: ${baseBranch}`);

            // Ensure integration branch exists
            const integBranch = "elis-bot";
            try {
              await github.rest.git.getRef({ owner, repo, ref: `heads/${integBranch}` });
              core.info(`Using existing branch '${integBranch}'.`);
            } catch (e) {
              if (e.status !== 404) throw e;
              const { data: baseRef } = await github.rest.git.getRef({ owner, repo, ref: `heads/${baseBranch}` });
              await github.rest.git.createRef({ owner, repo, ref: `refs/heads/${integBranch}`, sha: baseRef.object.sha });
              core.info(`Created branch '${integBranch}' from '${baseBranch}'.`);
            }

            // Upsert file on 'elis-bot'
            let currentSha;
            try {
              const { data: existing } = await github.rest.repos.getContent({ owner, repo, path: filePath, ref: integBranch });
              if (!Array.isArray(existing)) currentSha = existing.sha;
            } catch (e) { if (e.status !== 404) throw e; }

            await github.rest.repos.createOrUpdateFileContents({
              owner, repo, path: filePath, branch: integBranch,
              message: inMsg,
              content: Buffer.from(inRaw, "utf8").toString("base64"),
              sha: currentSha,
              committer: { name: "ELIS Bot", email: "233278419+elis-bot@users.noreply.github.com" },
              author:    { name: "ELIS Bot", email: "233278419+elis-bot@users.noreply.github.com" }
            });
            core.notice(`Committed to '${integBranch}': ${filePath}`);
