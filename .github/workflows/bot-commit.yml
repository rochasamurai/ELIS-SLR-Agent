# ELIS - Bot Commit and PR (auto-merge, no-PAT)
# Paste raw code -> branch -> PR -> auto-merge into main using GITHUB_TOKEN.

name: ELIS - Bot Commit and PR (auto-merge, no-PAT)

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: "Path to create/update (e.g., scripts/validate_json.py)"
        required: true
      content_raw:
        description: "Raw file content (paste full code here)"
        required: true
      commit_message:
        description: "Concise commit message"
        required: true
      target_branch:
        description: "Base branch"
        required: false
        default: "main"
      pr_title:
        description: "Pull Request title"
        required: false
        default: "Automated update"
      pr_body:
        description: "Pull Request body"
        required: false
        default: "Automated update by ELIS Bot."

jobs:
  commit-and-pr:
    runs-on: ubuntu-latest

    # Minimal permissions needed for pushing and opening PRs.
    permissions:
      contents: write
      pull-requests: write

    env:
      GH_TOKEN: ${{ github.token }}   # Token for gh CLI in later steps
      GIT_AUTHOR_NAME: ELIS Bot
      GIT_AUTHOR_EMAIL: 233278419+elis-bot@users.noreply.github.com
      GIT_COMMITTER_NAME: ELIS Bot
      GIT_COMMITTER_EMAIL: 233278419+elis-bot@users.noreply.github.com

    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_branch }}

      - name: Prepare working branch name
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          ts="$(date -u +'%Y%m%d-%H%M%S')"
          safe_msg="$(echo "${{ inputs.commit_message }}" | tr ' ' '-' | tr -cd '[:alnum:]-_')"
          echo "branch=bot/${safe_msg:-update}-${ts}" >> "$GITHUB_OUTPUT"

      - name: Create working branch
        shell: bash
        run: git switch -c "${{ steps.prep.outputs.branch }}"

      - name: Write file content (raw text)
        shell: bash
        env:
          IN_PATH: ${{ inputs.file_path }}
          CONTENT_RAW: ${{ inputs.content_raw }}
        run: |
          set -euo pipefail
          # Sanitise path: drop "file_path:" prefix, trim spaces, collapse slashes.
          fp="$IN_PATH"
          fp="${fp#file_path: }"
          fp="$(printf '%s' "$fp" | sed -E 's#[[:space:]]+$##; s#//+#/#g')"
          mkdir -p "$(dirname "$fp")"
          # Write exact content from input (supports multi-line).
          printf '%s' "$CONTENT_RAW" > "$fp"
          # Ensure trailing newline for POSIX tools.
          tail -c1 "$fp" | read -r _ || echo >> "$fp"
          # Guard: file must not be empty.
          test -s "$fp" || { echo "File is empty"; exit 1; }
          git status --porcelain

      - name: Commit changes
        shell: bash
        run: |
          git add -A
          git -c user.name="$GIT_AUTHOR_NAME" -c user.email="$GIT_AUTHOR_EMAIL" \
              commit -m "${{ inputs.commit_message }}"

      - name: Push branch
        shell: bash
        run: git push --set-upstream origin "${{ steps.prep.outputs.branch }}"

      - name: Create Pull Request
        shell: bash
        run: |
          gh pr create \
            --title "${{ inputs.pr_title }}" \
            --body  "${{ inputs.pr_body }}" \
            --base  "${{ inputs.target_branch }}" \
            --head  "${{ steps.prep.outputs.branch }}"

      - name: Enable auto-merge (squash)
        shell: bash
        run: |
          pr_url="$(gh pr view --json url -q .url)"
          gh pr merge "$pr_url" --squash --auto
          echo "Auto-merge enabled for: $pr_url"
