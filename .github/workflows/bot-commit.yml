# ELIS - Bot Commit (direct to elis-bot via GitHub App)
# Purpose:
#   Write/replace a single file with raw content, commit to the chosen branch,
#   and optionally open a PR to main.
# Inputs:
#   - file_path:     Repository-relative path to write.
#   - content_raw:   Raw file content (multi-line supported).
#   - commit_message:Concise commit message.
#   - target_branch: Branch to commit to (default: elis-bot).
#   - open_pr:       true/false to open PR elis-bot -> main (default: false).

name: ELIS - Bot Commit (direct to elis-bot via GitHub App)

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: "Repository path of the file to write"
        type: string
        required: true
      content_raw:
        description: "Raw file content (multi-line allowed)"
        type: string
        required: true
      commit_message:
        description: "Concise commit message"
        type: string
        required: true
      target_branch:
        description: "Branch to commit to"
        type: string
        required: false
        default: "elis-bot"
      open_pr:
        description: "Open PR to main after commit?"
        type: boolean
        required: false
        default: false

jobs:
  commit-and-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    defaults:
      run:
        shell: bash
    steps:
      - name: Mint installation token (GitHub App)
        id: app
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ELIS_APP_ID }}
          private-key: ${{ secrets.ELIS_APP_PRIVATE_KEY }}

      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_branch }}
          token: ${{ steps.app.outputs.token }}

      - name: Write file content
        run: |
          set -euo pipefail
          fp="${{ inputs.file_path }}"
          mkdir -p "$(dirname "$fp")"
          cat > "$fp" <<'EOF'
${{ inputs.content_raw }}
EOF
          # Ensure trailing newline for POSIX-friendly tools.
          tail -c1 "$fp" | read -r _ || echo >> "$fp"
          git status --porcelain

      - name: Commit changes
        run: |
          git config user.name  "ELIS Bot"
          git config user.email "233278419+elis-bot@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            git commit -m "${{ inputs.commit_message }}"
            git push origin "HEAD:${{ inputs.target_branch }}"
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request (optional)
        if: ${{ inputs.open_pr && steps.commit-changes.outputs.changed != 'false' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app.outputs.token }}
          script: |
            const { owner, repo } = context.repo;
            const head = '${{ inputs.target_branch }}';
            const base = 'main';
            const title = '${{ inputs.commit_message }}';
            const body  = 'Automated update by ELIS Bot.';
            const existing = await github.rest.pulls.list({
              owner, repo, state: 'open', head: `${owner}:${head}`, base
            });
            if (existing.data.length === 0) {
              const pr = await github.rest.pulls.create({ owner, repo, head, base, title, body });
              core.notice(`PR created: #${pr.data.number}`);
            } else {
              core.notice(`PR already open: #${existing.data[0].number}`);
            }
