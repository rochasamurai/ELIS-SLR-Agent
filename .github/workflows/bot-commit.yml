# ELIS - Bot Commit (direct to elis-bot)
# Paste raw code -> commit directly to a persistent integration branch (elis-bot).
# Keeps main protected and removes PR/auto-merge overhead on every file.

name: ELIS - Bot Commit (direct to elis-bot)

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: "Path to create/update (e.g., scripts/validate_json_jsonl.py)"
        required: true
      content_raw:
        description: "Raw file content (paste full code here)"
        required: true
      commit_message:
        description: "Concise commit message (e.g., feat: add validator)"
        required: true
      base_branch:
        description: "Base to initialise elis-bot from (blank = repository default)"
        required: false
        default: ""

jobs:
  commit-direct:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # required to write to the repository

    steps:
      - name: Commit directly to elis-bot (github-script, stable)
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            // ---- Read and validate inputs -----------------------------------
            const inPath  = ( ${{ toJson(inputs.file_path) }}      || "" ).trim();
            const inRaw   =   ${{ toJson(inputs.content_raw) }};            // keep newlines verbatim
            const inMsg   = ( ${{ toJson(inputs.commit_message) }} || "" ).trim();
            const inBase  = ( ${{ toJson(inputs.base_branch) }}    || "" ).trim();

            if (!inPath)  core.setFailed("file_path is empty");
            if (!inRaw)   core.setFailed("content_raw is empty");
            if (!inMsg)   core.setFailed("commit_message is empty");

            // Sanitise path and normalise slashes
            const filePath = inPath.replace(/^file_path:\s*/i, "").replace(/\/+/g, "/").replace(/^\/|\/$/g, "");
            const { owner, repo } = context.repo;

            // ---- Resolve repository default branch if base not provided ------
            let baseBranch = inBase;
            if (!baseBranch) {
              const { data: repoInfo } = await github.rest.repos.get({ owner, repo });
              baseBranch = repoInfo.default_branch || "main";
            }
            core.info(`Base branch: ${baseBranch}`);

            // ---- Ensure integration branch 'elis-bot' exists -----------------
            const integBranch = "elis-bot";
            const integRef = `heads/${integBranch}`;

            async function ensureIntegBranch() {
              try {
                const { data: ref } = await github.rest.git.getRef({ owner, repo, ref: integRef });
                core.info(`Using existing branch '${integBranch}' @ ${ref.object.sha}`);
              } catch (e) {
                if (e.status !== 404) throw e;
                const { data: baseRef } = await github.rest.git.getRef({ owner, repo, ref: `heads/${baseBranch}` });
                await github.rest.git.createRef({
                  owner, repo, ref: `refs/${integRef}`, sha: baseRef.object.sha
                });
                core.info(`Created branch '${integBranch}' from '${baseBranch}'`);
              }
            }
            await ensureIntegBranch();

            // ---- Create or update the target file on 'elis-bot' --------------
            let currentSha;
            try {
              const { data: existing } = await github.rest.repos.getContent({
                owner, repo, path: filePath, ref: integBranch
              });
              if (!Array.isArray(existing)) currentSha = existing.sha;
            } catch (e) {
              if (e.status !== 404) throw e; // ignore Not Found
            }

            await github.rest.repos.createOrUpdateFileContents({
              owner, repo, path: filePath, branch: integBranch,
              message: inMsg,
              content: Buffer.from(inRaw, "utf8").toString("base64"),
              sha: currentSha,
              committer: { name: "ELIS Bot", email: "233278419+elis-bot@users.noreply.github.com" },
              author:    { name: "ELIS Bot", email: "233278419+elis-bot@users.noreply.github.com" }
            });
            core.info(`Committed to '${integBranch}': ${filePath}`);
