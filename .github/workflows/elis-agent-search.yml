name: ELIS - Agent Search (Appendix A)
# =============================================================================
# Purpose
#   Run Appendix A (Search) using protocol-aligned queries, write the canonical
#   JSON artefact (A), and optionally open/refresh a PR with the changes.
#
# This update
#   - Maps newly created repo secrets to adapter-friendly env names:
#       * IEEE_EXPLORE_API_KEY        -> IEEE_API_KEY
#       * SCOPUS_API_KEY              -> SCOPUS_API_KEY
#       * WEB_OF_SCIENCE_API_KEY      -> WOS_API_KEY
#   - Leaves behaviour unchanged otherwise (safe).
#
# Usage
#   - Manual trigger (workflow_dispatch) with runtime knobs.
#   - Uploads artefact (14d retention).
#   - Commits on a dedicated branch and optionally opens/refreshes a PR.
# =============================================================================

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: "Base branch to PR into"
        required: false
        default: "main"
      write_branch:
        description: "Work branch to write artefacts (auto-suffixed if exists)"
        required: false
        default: "ci/agent-search-autopr"
      open_pr:
        description: "Open/refresh PR write_branch → base_branch"
        required: false
        default: "true"
      cap_per_source:
        description: "Cap per source per topic"
        required: false
        default: "100"
      job_result_cap:
        description: "Hard cap on total results"
        required: false
        default: "1000"
      dry_run:
        description: "Preview only (no write/commit/PR)"
        type: boolean
        required: false
        default: true

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: agent-search-${{ github.ref }}
  cancel-in-progress: false

jobs:
  search-a:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1) GitHub App token for reliable push & PR operations
      - name: Mint installation token (GitHub App)
        id: app
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ELIS_APP_ID }}
          private-key: ${{ secrets.ELIS_APP_PRIVATE_KEY }}

      # 2) Checkout using the App token (remote is already credentialed)
      - name: Checkout repository (App token)
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app.outputs.token }}
          fetch-depth: 0

      # 3) Git identity for commits
      - name: Configure Git identity
        run: |
          git config user.name  "elis-bot"
          git config user.email "elis-bot@users.noreply.github.com"

      # 4) Resolve inputs into outputs (safe defaults; no direct inputs.* in YAML keys)
      - name: Resolve run-time knobs
        id: knobs
        run: |
          set -euo pipefail
          echo "base=${{ github.event.inputs.base_branch || 'main' }}"             >> "$GITHUB_OUTPUT"
          echo "head=${{ github.event.inputs.write_branch || 'ci/agent-search-autopr' }}" >> "$GITHUB_OUTPUT"
          echo "open_pr=${{ github.event.inputs.open_pr || 'true' }}"              >> "$GITHUB_OUTPUT"
          echo "cap_per_source=${{ github.event.inputs.cap_per_source || '100' }}" >> "$GITHUB_OUTPUT"
          echo "job_result_cap=${{ github.event.inputs.job_result_cap || '1000' }}" >> "$GITHUB_OUTPUT"
          echo "dry_run=${{ github.event.inputs.dry_run || 'true' }}"              >> "$GITHUB_OUTPUT"

      # 5) Prepare the write branch BEFORE running the agent
      - name: Prepare write branch (create or fast-forward)
        run: |
          set -eux
          BASE="${{ steps.knobs.outputs.base }}"
          HEAD="${{ steps.knobs.outputs.head }}"
          git fetch origin --prune
          if git ls-remote --exit-code --heads origin "$HEAD" >/dev/null 2>&1; then
            git checkout -B "$HEAD" "origin/$HEAD"
            (git merge --ff-only "origin/$BASE" && echo "FF merged base") || true
          else
            git checkout -B "$HEAD" "origin/$BASE"
            git push -u origin "$HEAD"
          fi

      # 6) Python & pinned runtime deps (requests + PyYAML)
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install runtime deps (pinned)
        run: |
          python -m pip install --upgrade pip
          pip install "requests==2.32.3" "PyYAML==6.0.2"

      # 7) Patch the search config from UI inputs (write /tmp/elis_config.yml)
      - name: Patch search config from UI inputs
        env:
          CAP_PER_SOURCE:  ${{ steps.knobs.outputs.cap_per_source }}
          JOB_RESULT_CAP:  ${{ steps.knobs.outputs.job_result_cap }}
        run: |
          python - <<'PY'
          import yaml, sys, pathlib, os
          src = pathlib.Path("config/elis_search_queries.yml")
          if not src.exists():
              print("Config file not found: config/elis_search_queries.yml", file=sys.stderr)
              sys.exit(2)
          with src.open("r", encoding="utf-8") as f:
              cfg = yaml.safe_load(f) or {}
          g = cfg.setdefault("global", {})
          # Coerce integers safely
          def to_int(v, default):
              try:
                  return int(str(v).strip())
              except Exception:
                  return default
          g["max_results_per_source"] = to_int(os.environ.get("CAP_PER_SOURCE", "100"), 100)
          g["job_result_cap"] = to_int(os.environ.get("JOB_RESULT_CAP", "1000"), 1000)
          out = pathlib.Path("/tmp/elis_config.yml")
          out.write_text(yaml.safe_dump(cfg, sort_keys=False, allow_unicode=True), encoding="utf-8")
          print(f"Wrote patched config to {out}")
          PY

      # 8) Run Appendix A (Search). On dry-run, it won't write the JSON, but still emits Step Summary.
      - name: Run Appendix A (Search)
        env:
          # Polite user agent + throttle
          ELIS_CONTACT: "elis@samurai.com.br"
          ELIS_HTTP_SLEEP_S: "1.0"

          # MVP optional key
          SEMANTIC_SCHOLAR_API_KEY: ${{ secrets.SEMANTIC_SCHOLAR_API_KEY }}

          # NEW: map your configured secrets to adapter-friendly env names
          IEEE_API_KEY: ${{ secrets.IEEE_EXPLORE_API_KEY }}           # IEEE Xplore prod key
          SCOPUS_API_KEY: ${{ secrets.SCOPUS_API_KEY }}               # Scopus key
          WOS_API_KEY: ${{ secrets.WEB_OF_SCIENCE_API_KEY }}          # Web of Science key
        run: |
          set -eux
          DRY="${{ steps.knobs.outputs.dry_run }}"
          if [ "$DRY" = "true" ]; then
            python scripts/elis/search_mvp.py --config /tmp/elis_config.yml --dry-run
          else
            python scripts/elis/search_mvp.py --config /tmp/elis_config.yml
          fi

      # 9) Upload artefact (A). Only if not a dry run.
      - name: Upload artefact (Appendix A JSON)
        if: ${{ steps.knobs.outputs.dry_run != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: elis-agent-appendix-a
          path: json_jsonl/ELIS_Appendix_A_Search_rows.json
          retention-days: 14

      # 10) Commit the artefact (only when changed; skip PR path if no diff)
      - name: Commit Appendix A
        if: ${{ steps.knobs.outputs.dry_run != 'true' }}
        run: |
          set -eux
          git add -N json_jsonl/ELIS_Appendix_A_Search_rows.json || true
          if git diff --name-only --exit-code -- json_jsonl/ELIS_Appendix_A_Search_rows.json; then
            echo "No artefact diffs; skipping commit/push/PR."
            echo "skip_pr=true" >> "$GITHUB_ENV"
            exit 0
          fi
          git add json_jsonl/ELIS_Appendix_A_Search_rows.json
          git commit -m "feat(search): update Appendix A results"

      # 11) Ensure the remote URL uses the App token and push
      - name: Force remote to App-token URL
        if: env.skip_pr != 'true' && steps.knobs.outputs.dry_run != 'true'
        run: |
          set -eux
          git remote set-url origin "https://x-access-token:${{ steps.app.outputs.token }}@github.com/${{ github.repository }}"

      - name: Push work branch
        if: env.skip_pr != 'true' && steps.knobs.outputs.dry_run != 'true'
        run: |
          set -eux
          HEAD="${{ steps.knobs.outputs.head }}"
          git push --force-with-lease origin HEAD:"$HEAD"

      # 12) Open/refresh PR if requested
      - name: Compare base..head & open/refresh PR
        if: ${{ env.skip_pr != 'true' && steps.knobs.outputs.dry_run != 'true' && fromJSON(steps.knobs.outputs.open_pr || 'true') }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.app.outputs.token }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const base  = "${{ steps.knobs.outputs.base }}";
            const head  = "${{ steps.knobs.outputs.head }}";

            const cmp = await github.rest.repos.compareCommitsWithBasehead({
              owner, repo, basehead: `${base}...${head}`,
            });
            const hasDiff = (cmp.data.ahead_by > 0) || ((cmp.data.files || []).length > 0);
            if (!hasDiff) { core.info("No diff; no PR opened."); return; }

            const { data: openPRs } = await github.rest.pulls.list({
              owner, repo, state: 'open', base, head: `${owner}:${head}`,
            });

            if (openPRs.length > 0) {
              core.info(`PR already open: #${openPRs[0].number}`);
            } else {
              const { data: pr } = await github.rest.pulls.create({
                owner, repo, base, head,
                title: "feat(search): update Appendix A results",
                body: "Automated ELIS – Agent Search run.",
              });
              core.info(`Opened PR #${pr.number}`);
            }
