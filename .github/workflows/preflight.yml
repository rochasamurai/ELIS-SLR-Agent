name: ELIS – Preflight (manual CI mirror) # ----------------------------------------------------------------------------- # PURPOSE #   Manual, one-click "self-test" that mirrors the same gates used by ELIS – CI. #   Run this before opening a PR (or anytime) to confirm the branch is healthy. # # SCOPE #   - Ruff (lint)               → must pass #   - Black (format check)      → must pass #   - Pytest (unit tests)       → treat exit 5 "no tests" as success #   - JSON validation (--strict) if scripts/validate_json.py exists # # NOTES #   - Keeps 'name:' on line 1 (repo rule). #   - Uses workflow_dispatch only (repo rule). #   - Installs tools if they are not pinned in requirements.txt. # -----------------------------------------------------------------------------  on:   workflow_dispatch:     inputs:       python-version:         description: "Python version to use (matches CI default)"         required: false         default: "3.11"  jobs:   preflight:     runs-on: ubuntu-latest      steps:       # --- Checkout the current branch content       - name: Checkout         uses: actions/checkout@v4        # --- Install the requested Python version (defaults to 3.11)       - name: Setup Python         uses: actions/setup-python@v5         with:           python-version: ${{ inputs.python-version }}        # --- Install dependencies (requirements.txt if present) and ensure tools       #     Ruff/Black/Pytest are available even if not pinned by the project.       - name: Install dependencies and core tools         run: |           python -m pip install --upgrade pip           if [ -f requirements.txt ]; then             pip install -r requirements.txt           fi            # Ensure core tools exist. This mirrors what devs expect locally.           python - << 'PY' import importlib, subprocess, sys def ensure(pkg: str) -> None:     try:         importlib.import_module(pkg)     except ImportError:         subprocess.check_call([sys.executable, "-m", "pip", "install", pkg]) for pkg in ("ruff", "black", "pytest"):     ensure(pkg) print("OK: ruff/black/pytest available") PY        # --- Ruff (lint). Any finding should fail the run to keep quality high.       - name: Ruff (lint)         run: ruff check .        # --- Black (format check). Enforces formatting without modifying files.       - name: Black (check)         run: black --check .        # --- Pytest. Exit code 5 = "no tests collected" → treated as success.       #     Any other non-zero exit means real test failures → fail the job.       - name: Pytest (tolerate exit 5 = no tests)         run: |           set +e           pytest -q           code=$?           if [ $code -eq 5 ]; then             echo "Pytest exit 5 (no tests found) — tolerating as success."             exit 0           fi           exit $code        # --- JSON validation using our strict validator, if present.       #     This matches CI behaviour and will fail on schema violations.       - name: Validate JSON schemas (strict)         run: |           if [ -f scripts/validate_json.py ]; then             python scripts/validate_json.py --strict           else             echo "No validator at scripts/validate_json.py — skipping."           fi
