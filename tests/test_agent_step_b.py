""" Tests for the toy ELIS agent Step B.  Goals ----- - Ensure Screening rows (Appendix B) are generated. - Every Screening row has a valid 'decision' value. - If a row is 'excluded', it MUST include a non-empty 'reason'. - Files are written to disk (redirected to a temp directory during the test). """  from pathlib import Path import importlib.util import json   def _load_agent_module():     """     Dynamically load scripts/agent.py as a module without altering sys.path.     This avoids test-time packaging requirements for the toy agent.     """     path = Path("scripts/agent.py")     spec = importlib.util.spec_from_file_location("agent_mod", path)     assert spec and spec.loader     mod = importlib.util.module_from_spec(spec)     spec.loader.exec_module(mod)  # type: ignore[attr-defined]     return mod   def test_screening_rows_have_decision_and_optional_reason(tmp_path):     """     Run the agent into a temp artefact directory and inspect B rows.     - At least two B rows are expected (one included, one excluded).     - 'excluded' rows must carry a non-empty 'reason'.     """     agent = _load_agent_module()      # Redirect artefact paths to an isolated temp directory     agent.ART_DIR = tmp_path     agent.A_FILE = tmp_path / "ELIS_Appendix_A_Search_rows.json"     agent.B_FILE = tmp_path / "ELIS_Appendix_B_Screening_rows.json"     agent.C_FILE = tmp_path / "ELIS_Appendix_C_Extraction_rows.json"      result = agent.run()     assert "b" in result     assert isinstance(result["b"], list)     assert len(result["b"]) >= 2  # included + excluded example      # Verify file exists and is a JSON array     assert agent.B_FILE.exists(), "B file was not written"     rows = json.loads(agent.B_FILE.read_text(encoding="utf-8"))     assert isinstance(rows, list) and rows, "B rows must be a non-empty array"      # Check decision and reason logic     for row in rows:         assert row["decision"] in ("included", "excluded")         if row["decision"] == "excluded":             assert isinstance(row.get("reason"), str) and row["reason"].strip()
