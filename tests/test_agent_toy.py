# tests/test_agent_toy.py from __future__ import annotations  import json import subprocess from pathlib import Path  ROOT = Path(__file__).resolve().parents[1] DATA = ROOT / "json_jsonl"  A = DATA / "ELIS_Appendix_A_Search_rows.json" B = DATA / "ELIS_Appendix_B_Screening_rows.json" C = DATA / "ELIS_Appendix_C_DataExtraction_rows.json"   def _run_agent() -> None:     subprocess.run(["python", str(ROOT / "scripts" / "agent.py")], check=True, cwd=ROOT)   def _load_rows(p: Path):     assert p.exists(), f"missing artefact: {p}"     rows = json.loads(p.read_text(encoding="utf-8"))     assert isinstance(rows, list), f"not a JSON array: {p}"     assert rows, f"array empty: {p}"     return rows   def test_toy_agent_generates_abc_rows():     _run_agent()     for path in (A, B, C):         _load_rows(path)
