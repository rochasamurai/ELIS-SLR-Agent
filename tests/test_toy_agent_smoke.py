# tests/test_toy_agent_smoke.py """ Smoke test for the toy ELIS agent.  - Runs make_toy_artefacts() into a temporary directory (no repo writes). - Verifies the three A/B/C JSON artefacts exist and have the expected shape. """  from __future__ import annotations  import json from pathlib import Path   def test_toy_agent_writes_abc(tmp_path, monkeypatch):     # Import lazily so patching works on module globals.     import scripts.agent as agent  # type: ignore      # Redirect agent output to an isolated temp directory.     a = tmp_path / "ELIS_Appendix_A_Search_rows.json"     b = tmp_path / "ELIS_Appendix_B_Screening_rows.json"     c = tmp_path / "ELIS_Appendix_C_DataExtraction_rows.json"      monkeypatch.setattr(agent, "DATA_DIR", tmp_path, raising=True)     monkeypatch.setattr(agent, "A_PATH", a, raising=True)     monkeypatch.setattr(agent, "B_PATH", b, raising=True)     monkeypatch.setattr(agent, "C_PATH", c, raising=True)      # Execute the toy artefact writer.     agent.make_toy_artefacts()      # All three files should exist with one JSON row each and required keys.     for path in (a, b, c):         assert path.exists(), f"Missing artefact: {path.name}"         rows = json.loads(path.read_text(encoding="utf-8"))         assert isinstance(rows, list) and len(rows) == 1, path.name         row = rows[0]         for key in ("id", "source", "created_at", "note"):             assert key in row, f"{path.name} missing key {key}"         assert isinstance(row["note"], str) and row["note"], "note must be non-empty"
