#!/usr/bin/env bash # ----------------------------------------------------------------------------- # ELIS – Local Preflight (mirror of ELIS – CI) # # PURPOSE #   Run the same checks as CI on your machine before opening a PR: #     1) Ruff (lint)              → must pass #     2) Black (format check)     → must pass #     3) Pytest (unit tests)      → exit 5 "no tests" treated as success #     4) JSON validation (--strict) if scripts/validate_json.py exists # # USAGE #   bash scripts/selfcheck.sh #   # or, after making it executable: #   chmod +x scripts/selfcheck.sh && ./scripts/selfcheck.sh # # REQUIREMENTS #   - Python 3.11 (or the version your repo/CI uses) #   - pip available on PATH #   - Internet access if packages need to be installed # # BEHAVIOUR #   - Installs dependencies from requirements.txt if present. #   - Ensures ruff/black/pytest are installed (if not pinned). #   - Exits non-zero if any required step fails. # -----------------------------------------------------------------------------  set -euo pipefail  # Optional pretty errors with line numbers trap 'echo "ERROR: ${BASH_SOURCE[0]}:${LINENO} command failed."; exit 1' ERR  echo "==> [0/4] Setup Python environment" python -m pip install --upgrade pip  if [ -f requirements.txt ]; then   echo "==> Installing project requirements"   python -m pip install -r requirements.txt else   echo "==> No requirements.txt found — continuing" fi  echo "==> Ensuring core dev tools exist (ruff/black/pytest)" python - << 'PY' import importlib, subprocess, sys def ensure(pkg: str) -> None:     try:         importlib.import_module(pkg)         print(f"OK: {pkg} already installed")     except ImportError:         print(f"Installing: {pkg}")         subprocess.check_call([sys.executable, "-m", "pip", "install", pkg]) for pkg in ("ruff", "black", "pytest"):     ensure(pkg) PY  echo "==> [1/4] Ruff (lint)" ruff check .  echo "==> [2/4] Black (format check)" black --check .  echo "==> [3/4] Pytest" set +e pytest -q code=$? if [ $code -eq 5 ]; then   echo "Pytest exit 5 (no tests found) — treating as success."   code=0 fi set -e if [ $code -ne 0 ]; then   echo "Pytest failures detected (exit code $code)."   exit $code fi  echo "==> [4/4] JSON validation (strict)" if [ -f scripts/validate_json.py ]; then   python scripts/validate_json.py --strict else   echo "Validator not found at scripts/validate_json.py — skipping." fi  echo "==> Preflight OK — your branch mirrors CI and is ready for a PR."
